som$n <- NULL
colnames(som) <- c("artist", paste0("rank_", i))
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
}
#Rank Update
som <- count(artdata[(artdata$counter>42 & artdata$counter<63),], artist)
som$rank_new <- dense_rank(desc(som$n))  # rank by equivalent to rank(ties.method = "first")
# the alternative is to rank by row_number or min_rank
som$n <- NULL
colnames(som) <- c("artist", "rank_update")
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
##Rank by Annual Volume
for(i in 1:16) {
teller <- 1999+i
som <- count(artdata[(artdata$year==teller),], artist)
som$rank_new <- dense_rank(desc(som$n))
# the alternative is to rank by row_number or min_rank
som$n <- NULL
colnames(som) <- c("artist", paste0("rank_y", teller))
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
}
##Rank by 2-year Volume
for(i in 1:8) {
teller <- 1998+(i*2-1)
som <- count(artdata[(artdata$year>teller & artdata$year<(teller+3)),], artist)
som$rank_new <- dense_rank(desc(som$n))
# the alternative is to rank by row_number or min_rank
som$n <- NULL
colnames(som) <- c("artist", paste0("rank_a", i))
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
}
artdata <- merge(artdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
## Rank total
rankings <- count(artdata, artist)
rankings$rank_total <- row_number(desc(rankings$n))
artdata <- merge(artdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
##======================##
## MATCHING METHODOLOGY ##
##======================##
#check for duplicates (how many)
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
#The distance metric between any two sales (across the intervening time period) is the
#absolute value of the difference between the two predicted hedonic log values.
#The threshold for this distance metric can be customised.
#At one extreme, one can choose to select only one pair with the smallest value of the distance metric.
#match per artist by hedonic function
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
teller <-0
fullrep <- data.frame()
fullrep1<- data.frame()
fullrep2 <- data.frame()
fullrep3<- data.frame()
rartdata <- subset(artdata,artdata$rank_all<max(artdata$rank_all,na.rm=TRUE))
keep <- c("lnprice","artist","lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy","counter")
rartdata <- rartdata[,names(rartdata) %in% keep]
rartdata <- rartdata[complete.cases(rartdata),]
## Rank total again for new sample
rankings <- count(rartdata, artist)
rankings$rank_total <- row_number(desc(rankings$n))
rartdata <- merge(rartdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
for(k in 1:max(rartdata$rank_total)) {
modeldata <- subset(rartdata, rartdata$rank_total==k)
modeldata$med_code <- factor(modeldata$med_code)
modeldata$ah_code <- factor(modeldata$ah_code)
modeldata$dum_signed <- factor(modeldata$dum_signed)
modeldata$dum_dated <- factor(modeldata$dum_dated)
modeldata$timedummy <- factor(modeldata$timedummy)
#modeldata <- cbind(modeldata,model.matrix(~modeldata$med_code))
if(length(levels(modeldata$med_code))==1) { modeldata$med_code <- as.numeric(0) }
if(length(levels(modeldata$ah_code))==1) {  modeldata$ah_code <- as.numeric(0) }
if(length(levels(modeldata$dum_signed))==1) { modeldata$dum_signed <- as.numeric(0) }
if(length(levels(modeldata$dum_dated))==1) { modeldata$dum_dated <- as.numeric(0)   }
if(length(levels(modeldata$timedummy))!=1) { #modeldata$timedummy <- as.numeric(0)
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
#calculate predicted value for each painting (excluding time dummies)
#newdata <- modeldata
#newdata$timedummy <- modeldata$timedummy[1]
modeldata$timedummy <- modeldata$timedummy[1]
#pr <- which(!(newdata$med_code %in% levels(modeldata$med_code)))
#newdata$med_code[pr] <- NA
#modeldata <- cbind(modeldata,fitted=predict.lm(model,newdata))
#fitted<-as.data.frame(predict.lm(model,newdata,type="terms",na.action = na.exclude,
#        terms = c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated","nr_works")))
modeldata <- cbind(modeldata,fitted=predict.lm(model))
#modeldata$fitted <- rowSums(fitted)
#modeldata <- modeldata[!is.na(modeldata$fitted),]
#try id manually:
modeldata$id <- 0
for(i in 1:nrow(modeldata)) {
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)
modeldata$id[(modeldata$distance==min(modeldata[modeldata[,"id"]==0
,"distance"],na.rm=TRUE))] <- teller
}
}
repdata <- repsaledata(modeldata$lnprice,modeldata$counter,modeldata$id)
fullrep <- rbind(fullrep,repdata)
repdata1 <- repsaledata(modeldata$lnarea,modeldata$counter,modeldata$id)
fullrep1 <- rbind(fullrep1,repdata1)
repdata2 <- repsaledata(modeldata$med_code,modeldata$counter,modeldata$id)
fullrep2 <- rbind(fullrep2,repdata2)
repdata3 <- repsaledata(modeldata$ah_code,modeldata$counter,modeldata$id)
fullrep3 <- rbind(fullrep3,repdata3)
}
}
fullrep <- cbind(fullrep,fullrep1[,4:5])
fullrep <- cbind(fullrep,fullrep2[,4:5])
fullrep <- cbind(fullrep,fullrep3[,4:5])
colnames(fullrep) <- c("id","time0","time1","price0","price1","area0","area1","med_code0","med_code1",
"ah_code0","ah_code1")
repeatsales <- repsale(fullrep$price0,fullrep$time0,fullrep$price1,fullrep$time1,mergefirst=1,
graph=TRUE,graph.conf=TRUE,conf=.95, stage3="abs")
repeatsales_index <- exp(as.data.frame(repeatsales$pindex))*100
dy <- fullrep$price1 - fullrep$price0
timevar <- levels(factor(c(fullrep$time0, fullrep$time1)))
nt = length(timevar)
n = length(dy)
xmat <- array(0, dim = c(n, nt - 1))
for (j in seq(1 + 1, nt)) {
xmat[, j - 1] <- ifelse(fullrep$time1 == timevar[j], 1, xmat[, j - 1])
xmat[, j - 1] <- ifelse(fullrep$time0 == timevar[j],-1, xmat[, j - 1])
}
colnames(xmat) <- paste("Time", seq(1 + 1, nt))
fit <- lm(dy ~ xmat + 0)
med0 <- model.matrix(~fullrep$med_code0)
med0 <- as.data.frame(med0)
med0[,1] <- rowSums(med0)-med0[,1]
View(med0)
med0$Draw <- 0
if(rowSums(med0)==1) { med0$Draw <- 1}
med0$Draw <- rowSums(med0)
med0$Draw <- 0
med0$Draw <- rowSums(med0)-med0[,1]
med0$Draw <- 0
med0$Draw <- abs(rowSums(med0)-2)
med0 <- model.matrix(~fullrep$med_code0)
med0 <- as.data.frame(med0)
med0$Draw <- 0
med0$Draw <- abs(rowSums(med0)-2)
med1 <- model.matrix(~fullrep$med_code1)
med1 <- as.data.frame(med1)
med1$Draw <- 0
med1$Draw <- abs(rowSums(med1)-2)
dmed <- med0 - med1
View(dmed)
dmed <- dmed[,-1]
darea <- fullrep$area1 - fullrep$area0
ps.RS <- lm(dy ~ darea + dmed + xmat + 0)
dmed <- as.matrix(dmed)
ps.RS <- lm(dy ~ darea + dmed + xmat + 0)
View(fullrep)
med1 <- model.matrix(~fullrep$med_code1)
ps.RS <- lm(dy ~ darea + med1 + xmat + 0)
dmed1 <- med0[,1] - med1[,1]
ps.RS <- lm(dy ~ darea + dmed1 + xmat + 0)
med0 <- model.matrix(~fullrep$med_code0)
med1 <- model.matrix(~fullrep$med_code1)
dmed <- med1-med0
ps.RS <- lm(dy ~ darea + dmed + xmat + 0)
med0 <- model.matrix(~fullrep$med_code0)
med0 <- as.data.frame(med0)
med0$Draw <- 0
med0$Draw <- abs(rowSums(med0)-2)
med1 <- model.matrix(~fullrep$med_code1)
med1 <- as.data.frame(med1)
med1$Draw <- 0
med1$Draw <- abs(rowSums(med1)-2)
dmed <- med0 - med1
med0 <- model.matrix(~fullrep$med_code0)
View(med0)
fullrep[is.na(fullrep$med_code0),] <- "Oil"
#check for duplicates (how many)
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
#The distance metric between any two sales (across the intervening time period) is the
#absolute value of the difference between the two predicted hedonic log values.
#The threshold for this distance metric can be customised.
#At one extreme, one can choose to select only one pair with the smallest value of the distance metric.
#match per artist by hedonic function
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
teller <-0
fullrep <- data.frame()
fullrep1<- data.frame()
fullrep2 <- data.frame()
fullrep3<- data.frame()
rartdata <- subset(artdata,artdata$rank_all<max(artdata$rank_all,na.rm=TRUE))
keep <- c("lnprice","artist","lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy","counter")
rartdata <- rartdata[,names(rartdata) %in% keep]
rartdata <- rartdata[complete.cases(rartdata),]
## Rank total again for new sample
rankings <- count(rartdata, artist)
rankings$rank_total <- row_number(desc(rankings$n))
rartdata <- merge(rartdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
for(k in 1:max(rartdata$rank_total)) {
modeldata <- subset(rartdata, rartdata$rank_total==k)
modeldata$med_code <- factor(modeldata$med_code)
modeldata$ah_code <- factor(modeldata$ah_code)
modeldata$dum_signed <- factor(modeldata$dum_signed)
modeldata$dum_dated <- factor(modeldata$dum_dated)
modeldata$timedummy <- factor(modeldata$timedummy)
#modeldata <- cbind(modeldata,model.matrix(~modeldata$med_code))
if(length(levels(modeldata$med_code))==1) { modeldata$med_code <- as.numeric(0) }
if(length(levels(modeldata$ah_code))==1) {  modeldata$ah_code <- as.numeric(0) }
if(length(levels(modeldata$dum_signed))==1) { modeldata$dum_signed <- as.numeric(0) }
if(length(levels(modeldata$dum_dated))==1) { modeldata$dum_dated <- as.numeric(0)   }
if(length(levels(modeldata$timedummy))!=1) { #modeldata$timedummy <- as.numeric(0)
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
#calculate predicted value for each painting (excluding time dummies)
#newdata <- modeldata
#newdata$timedummy <- modeldata$timedummy[1]
modeldata$timedummy <- modeldata$timedummy[1]
#pr <- which(!(newdata$med_code %in% levels(modeldata$med_code)))
#newdata$med_code[pr] <- NA
#modeldata <- cbind(modeldata,fitted=predict.lm(model,newdata))
#fitted<-as.data.frame(predict.lm(model,newdata,type="terms",na.action = na.exclude,
#        terms = c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated","nr_works")))
modeldata <- cbind(modeldata,fitted=predict.lm(model))
#modeldata$fitted <- rowSums(fitted)
#modeldata <- modeldata[!is.na(modeldata$fitted),]
#try id manually:
modeldata$id <- 0
for(i in 1:nrow(modeldata)) {
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)
modeldata$id[(modeldata$distance==min(modeldata[modeldata[,"id"]==0
,"distance"],na.rm=TRUE))] <- teller
}
}
repdata <- repsaledata(modeldata$lnprice,modeldata$counter,modeldata$id)
fullrep <- rbind(fullrep,repdata)
repdata1 <- repsaledata(modeldata$lnarea,modeldata$counter,modeldata$id)
fullrep1 <- rbind(fullrep1,repdata1)
repdata2 <- repsaledata(modeldata$med_code,modeldata$counter,modeldata$id)
fullrep2 <- rbind(fullrep2,repdata2)
repdata3 <- repsaledata(modeldata$ah_code,modeldata$counter,modeldata$id)
fullrep3 <- rbind(fullrep3,repdata3)
}
}
fullrep <- cbind(fullrep,fullrep1[,4:5])
fullrep <- cbind(fullrep,fullrep2[,4:5])
fullrep <- cbind(fullrep,fullrep3[,4:5])
dy <- fullrep$price1 - fullrep$price0
timevar <- levels(factor(c(fullrep$time0, fullrep$time1)))
nt = length(timevar)
n = length(dy)
xmat <- array(0, dim = c(n, nt - 1))
for (j in seq(1 + 1, nt)) {
xmat[, j - 1] <- ifelse(fullrep$time1 == timevar[j], 1, xmat[, j - 1])
xmat[, j - 1] <- ifelse(fullrep$time0 == timevar[j],-1, xmat[, j - 1])
}
colnames(xmat) <- paste("Time", seq(1 + 1, nt))
fit <- lm(dy ~ xmat + 0)
fullrep[is.na(fullrep$med_code0),"med_code0"] <- "Oil"
##======================##
## MATCHING METHODOLOGY ##
##======================##
#check for duplicates (how many)
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
#The distance metric between any two sales (across the intervening time period) is the
#absolute value of the difference between the two predicted hedonic log values.
#The threshold for this distance metric can be customised.
#At one extreme, one can choose to select only one pair with the smallest value of the distance metric.
#match per artist by hedonic function
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
teller <-0
fullrep <- data.frame()
fullrep1<- data.frame()
fullrep2 <- data.frame()
fullrep3<- data.frame()
rartdata <- subset(artdata,artdata$rank_all<max(artdata$rank_all,na.rm=TRUE))
keep <- c("lnprice","artist","lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy","counter")
rartdata <- rartdata[,names(rartdata) %in% keep]
rartdata <- rartdata[complete.cases(rartdata),]
## Rank total again for new sample
rankings <- count(rartdata, artist)
rankings$rank_total <- row_number(desc(rankings$n))
rartdata <- merge(rartdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
for(k in 1:max(rartdata$rank_total)) {
modeldata <- subset(rartdata, rartdata$rank_total==k)
modeldata$med_code <- factor(modeldata$med_code)
modeldata$ah_code <- factor(modeldata$ah_code)
modeldata$dum_signed <- factor(modeldata$dum_signed)
modeldata$dum_dated <- factor(modeldata$dum_dated)
modeldata$timedummy <- factor(modeldata$timedummy)
#modeldata <- cbind(modeldata,model.matrix(~modeldata$med_code))
if(length(levels(modeldata$med_code))==1) { modeldata$med_code <- as.numeric(0) }
if(length(levels(modeldata$ah_code))==1) {  modeldata$ah_code <- as.numeric(0) }
if(length(levels(modeldata$dum_signed))==1) { modeldata$dum_signed <- as.numeric(0) }
if(length(levels(modeldata$dum_dated))==1) { modeldata$dum_dated <- as.numeric(0)   }
if(length(levels(modeldata$timedummy))!=1) { #modeldata$timedummy <- as.numeric(0)
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
#calculate predicted value for each painting (excluding time dummies)
#newdata <- modeldata
#newdata$timedummy <- modeldata$timedummy[1]
modeldata$timedummy <- modeldata$timedummy[1]
#pr <- which(!(newdata$med_code %in% levels(modeldata$med_code)))
#newdata$med_code[pr] <- NA
#modeldata <- cbind(modeldata,fitted=predict.lm(model,newdata))
#fitted<-as.data.frame(predict.lm(model,newdata,type="terms",na.action = na.exclude,
#        terms = c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated","nr_works")))
modeldata <- cbind(modeldata,fitted=predict.lm(model))
#modeldata$fitted <- rowSums(fitted)
#modeldata <- modeldata[!is.na(modeldata$fitted),]
#try id manually:
modeldata$id <- 0
for(i in 1:nrow(modeldata)) {
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)
modeldata$id[(modeldata$distance==min(modeldata[modeldata[,"id"]==0
,"distance"],na.rm=TRUE))] <- teller
}
}
repdata <- repsaledata(modeldata$lnprice,modeldata$counter,modeldata$id)
fullrep <- rbind(fullrep,repdata)
repdata1 <- repsaledata(modeldata$lnarea,modeldata$counter,modeldata$id)
fullrep1 <- rbind(fullrep1,repdata1)
repdata2 <- repsaledata(modeldata$med_code,modeldata$counter,modeldata$id)
fullrep2 <- rbind(fullrep2,repdata2)
repdata3 <- repsaledata(modeldata$ah_code,modeldata$counter,modeldata$id)
fullrep3 <- rbind(fullrep3,repdata3)
}
}
fullrep <- cbind(fullrep,fullrep1[,4:5])
fullrep <- cbind(fullrep,fullrep2[,4:5])
fullrep <- cbind(fullrep,fullrep3[,4:5])
colnames(fullrep) <- c("id","time0","time1","price0","price1","area0","area1","med_code0","med_code1",
"ah_code0","ah_code1")
fullrep$med_code0[is.na(fullrep$med_code0)] <- "Oil"
fullrep$med_code1[is.na(fullrep$med_code1)] <- "Oil"
fullrep$ah_code0[is.na(fullrep$ah_code0)] <- "Strauss"
fullrep$ah_code1[is.na(fullrep$ah_code1)] <- "Strauss"
med0 <- model.matrix(~fullrep$med_code0)
med0 <- as.data.frame(med0)
med0$Draw <- 0
med0$Draw <- abs(rowSums(med0)-2)
med1 <- model.matrix(~fullrep$med_code1)
med1 <- as.data.frame(med1)
med1$Draw <- 0
med1$Draw <- abs(rowSums(med1)-2)
dmed <- med0 - med1
dmed1 <- dmed[,-1]
dy <- fullrep$price1 - fullrep$price0
timevar <- levels(factor(c(fullrep$time0, fullrep$time1)))
nt = length(timevar)
n = length(dy)
xmat <- array(0, dim = c(n, nt - 1))
for (j in seq(1 + 1, nt)) {
xmat[, j - 1] <- ifelse(fullrep$time1 == timevar[j], 1, xmat[, j - 1])
xmat[, j - 1] <- ifelse(fullrep$time0 == timevar[j],-1, xmat[, j - 1])
}
colnames(xmat) <- paste("Time", seq(1 + 1, nt))
darea <- fullrep$area1 - fullrep$area0
ps.RS <- lm(dy ~ darea + dmed + xmat + 0)
med0 <- model.matrix(~fullrep$med_code0)
med1 <- model.matrix(~fullrep$med_code1)
dmed <- med0 - med1
ps.RS <- lm(dy ~ darea + dmed + xmat + 0)
summary(ps.RS)
ps.RS_results <- summary(ps.RS)$coefficients[grepl("Time", rownames(summary(ps.RS)$coefficients)),1]
ps.RS_results <- as.data.frame(ps.RS_results)
ps.RS_results$index_all <- exp(ps.RS_results$ps.RS_results)*100
View(ps.RS_results)
ah0 <- model.matrix(~fullrep$ah_code0)
ah1 <- model.matrix(~fullrep$ah_code1)
dah <- ah0 - ah1
ps.RS <- lm(dy ~ darea + dmed + dah + xmat + 0)
summary(ps.RS)
ps.RS_results <- summary(ps.RS)$coefficients[grepl("Time", rownames(summary(ps.RS)$coefficients)),1]
ps.RS_results <- as.data.frame(ps.RS_results)
ps.RS_results$index_all <- exp(ps.RS_results$ps.RS_results)*100
teller <-0
fullrep <- data.frame()
fullrep1<- data.frame()
fullrep2 <- data.frame()
fullrep3<- data.frame()
fullrep4 <- data.frame()
fullrep5<- data.frame()
fullrep6 <- data.frame()
fullrep7<- data.frame()
rartdata <- subset(artdata,artdata$rank_all<max(artdata$rank_all,na.rm=TRUE))
keep <- c("lnprice","artist","lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy","counter")
rartdata <- rartdata[,names(rartdata) %in% keep]
rartdata <- rartdata[complete.cases(rartdata),]
## Rank total again for new sample
rankings <- count(rartdata, artist)
rankings$rank_total <- row_number(desc(rankings$n))
rartdata <- merge(rartdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
for(k in 1:max(rartdata$rank_total)) {
modeldata <- subset(rartdata, rartdata$rank_total==k)
modeldata$med_code <- factor(modeldata$med_code)
modeldata$ah_code <- factor(modeldata$ah_code)
modeldata$dum_signed <- factor(modeldata$dum_signed)
modeldata$dum_dated <- factor(modeldata$dum_dated)
modeldata$timedummy <- factor(modeldata$timedummy)
#modeldata <- cbind(modeldata,model.matrix(~modeldata$med_code))
if(length(levels(modeldata$med_code))==1) { modeldata$med_code <- as.numeric(0) }
if(length(levels(modeldata$ah_code))==1) {  modeldata$ah_code <- as.numeric(0) }
if(length(levels(modeldata$dum_signed))==1) { modeldata$dum_signed <- as.numeric(0) }
if(length(levels(modeldata$dum_dated))==1) { modeldata$dum_dated <- as.numeric(0)   }
if(length(levels(modeldata$timedummy))!=1) { #modeldata$timedummy <- as.numeric(0)
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
#calculate predicted value for each painting (excluding time dummies)
#newdata <- modeldata
#newdata$timedummy <- modeldata$timedummy[1]
modeldata$timedummy <- modeldata$timedummy[1]
#pr <- which(!(newdata$med_code %in% levels(modeldata$med_code)))
#newdata$med_code[pr] <- NA
#modeldata <- cbind(modeldata,fitted=predict.lm(model,newdata))
#fitted<-as.data.frame(predict.lm(model,newdata,type="terms",na.action = na.exclude,
#        terms = c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated","nr_works")))
modeldata <- cbind(modeldata,fitted=predict.lm(model))
#modeldata$fitted <- rowSums(fitted)
#modeldata <- modeldata[!is.na(modeldata$fitted),]
#try id manually:
modeldata$id <- 0
for(i in 1:nrow(modeldata)) {
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)
modeldata$id[(modeldata$distance==min(modeldata[modeldata[,"id"]==0
,"distance"],na.rm=TRUE))] <- teller
}
}
repdata <- repsaledata(modeldata$lnprice,modeldata$counter,modeldata$id)
fullrep <- rbind(fullrep,repdata)
repdata1 <- repsaledata(modeldata$lnarea,modeldata$counter,modeldata$id)
fullrep1 <- rbind(fullrep1,repdata1)
repdata2 <- repsaledata(modeldata$med_code,modeldata$counter,modeldata$id)
fullrep2 <- rbind(fullrep2,repdata2)
repdata3 <- repsaledata(modeldata$ah_code,modeldata$counter,modeldata$id)
fullrep3 <- rbind(fullrep3,repdata3)
repdata4 <- repsaledata(modeldata$lnsculpt_area,modeldata$counter,modeldata$id)
fullrep4 <- rbind(fullrep4,repdata4)
repdata5 <- repsaledata(modeldata$dum_signed,modeldata$counter,modeldata$id)
fullrep5 <- rbind(fullrep5,repdata5)
repdata6 <- repsaledata(modeldata$dum_dated,modeldata$counter,modeldata$id)
fullrep6 <- rbind(fullrep6,repdata6)
repdata7 <- repsaledata(modeldata$nr_works,modeldata$counter,modeldata$id)
fullrep7 <- rbind(fullrep7,repdata7)
}
}
fullrep <- cbind(fullrep,fullrep1[,4:5])
fullrep <- cbind(fullrep,fullrep2[,4:5])
fullrep <- cbind(fullrep,fullrep3[,4:5])
fullrep <- cbind(fullrep,fullrep4[,4:5])
fullrep <- cbind(fullrep,fullrep5[,4:5])
fullrep <- cbind(fullrep,fullrep6[,4:5])
fullrep <- cbind(fullrep,fullrep7[,4:5])
colnames(fullrep) <- c("id","time0","time1","price0","price1","area0","area1","med_code0","med_code1",
"ah_code0","ah_code1","sculpt0","sculpt1","sign0","sign1","date0","date1",
"nr0","n1")
dsculpt <- fullrep$sculpt1 - fullrep$sculpt0
dnr <- fullrep$nr1 - fullrep$nr0
colnames(fullrep) <- c("id","time0","time1","price0","price1","area0","area1","med_code0","med_code1",
"ah_code0","ah_code1","sculpt0","sculpt1","sign0","sign1","date0","date1",
"nr0","nr1")
dnr <- fullrep$nr1 - fullrep$nr0
med0 <- model.matrix(~fullrep$med_code0)
med1 <- model.matrix(~fullrep$med_code1)
dmed <- med1 - med0
ah0 <- model.matrix(~fullrep$ah_code0)
ah1 <- model.matrix(~fullrep$ah_code1)
dah <- ah1 - ah0
dsculpt <- fullrep$sculpt1 - fullrep$sculpt0
dnr <- fullrep$nr1 - fullrep$nr0
sign0 <- model.matrix(~fullrep$sign0)
sign1 <- model.matrix(~fullrep$sign1)
dsign <- sign1 - sign0
date0 <- model.matrix(~fullrep$date0)
date1 <- model.matrix(~fullrep$date1)
ddate <- date1 - date0
View(repdata)
ps.RS <- lm(dy ~ darea + dmed + dah + dsculpt + dnr + dsign + ddate + xmat + 0)
fullrep$med_code0[is.na(fullrep$med_code0)] <- "Oil"
fullrep$med_code1[is.na(fullrep$med_code1)] <- "Oil"
fullrep$ah_code0[is.na(fullrep$ah_code0)] <- "Strauss"
fullrep$ah_code1[is.na(fullrep$ah_code1)] <- "Strauss"
darea <- fullrep$area1 - fullrep$area0
med0 <- model.matrix(~fullrep$med_code0)
med1 <- model.matrix(~fullrep$med_code1)
dmed <- med1 - med0
ah0 <- model.matrix(~fullrep$ah_code0)
ah1 <- model.matrix(~fullrep$ah_code1)
dah <- ah1 - ah0
sign0 <- model.matrix(~fullrep$sign0)
sign1 <- model.matrix(~fullrep$sign1)
dsign <- sign1 - sign0
date0 <- model.matrix(~fullrep$date0)
date1 <- model.matrix(~fullrep$date1)
ddate <- date1 - date0
ps.RS <- lm(dy ~ darea + dmed + dah + dsculpt + dnr + dsign + ddate + xmat + 0)
summary(ps.RS)
ps.RS_results <- summary(ps.RS)$coefficients[grepl("Time", rownames(summary(ps.RS)$coefficients)),1]
ps.RS_results <- as.data.frame(ps.RS_results)
ps.RS_results$index_all <- exp(ps.RS_results$ps.RS_results)*100
View(modeldata)
