RS_indices <- merge(RS_indices, RS_index2, by="Date", all=TRUE)
RS_indices[1,2:4] <- 100
colnames(RS_indices) <- c("Date","Repeat Sales","pseudo-RS1","pseudo-RS2")
#------------------------------------------------------------------------
index_plot <- melt(RS_indices[,-2], id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
##============##
## EVALUATION ##
##============##
all_indices <- cbind(naive_indices,hedonic_indices[-1],RS_indices[-1])
all_indices[is.na(all_indices)]<- 100
##Re-weighted to 2000=100
#rw_all <- all_indices
#for(i in 2:10) {
#    rw_all[,i] <- all_indices[,i]/mean(all_indices[1:4,i])*100
#}
index_plot <- melt(all_indices[,c(1,2,6,10)], id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
# Check correlations (in levels and growth rates)
source("corstarsl.R")
temp_indices <- all_indices[-3,]
colnames(temp_indices) <- c("Date","Median","Fisher","Hedonic","Adj1y","Adj2y","Roll","RepSale","ps.RS1","ps.RS2")
for(i in 2:ncol(temp_indices)) {temp_indices[,i] <- as.numeric(temp_indices[,i]) }
#ts.all_indices <- as.ts(temp_indices[,-1],start =c(2000,4),end=c(2015,4),frequency=4)
#xt <- xtable(corstarsl(ts.all_indices), caption="Correlations in Levels")
print(xt, "latex",comment=FALSE, caption.placement = getOption("xtable.caption.placement", "top"))
dl.indices <- as.data.frame(diff(log(ts.all_indices)))
xt <- xtable(corstarsl(dl.indices), caption="Correlations in DLogs")
print(xt, "latex",comment=FALSE, caption.placement = getOption("xtable.caption.placement", "top"))
##Comparing index smoothness
# Check std dev or volatility en AC(1)
ac.1 <- numeric()
eval <- data.frame()
returns <- dl.indices
HPdev <- numeric()
vol <- apply(returns,MARGIN=2, FUN=sd, na.rm=TRUE)
for(i in 1:ncol(returns)) {
ac.1[i] <- acf(returns,na.action = na.pass, plot = FALSE, lag.max = 1)$acf[,,i][2,i]
}
hp <- temp_indices
for(i in 2:10) {
hp[,i] <- hpfilter(temp_indices[,i],freq = 1600)[2]
}
ts.hp <- as.ts(hp[,-1],start =c(2000,1),end=c(2015,4),frequency=4)
hpreturns <- as.data.frame(diff(log(ts.hp)))
for(i in 1:ncol(returns)) {
HPdev[i] <- sum((hpreturns[,i] - returns[,i])^2)
}
eval <- cbind(vol=vol,ac.1=ac.1[1:9],HPdev)
xt <- xtable(eval, caption="Smoothness Indicators")
print(xt, "latex",comment=FALSE, caption.placement = getOption("xtable.caption.placement", "top"))
##Compared to other art markets
assets <- read.csv("Assets.csv", header=TRUE, na.strings = "", skipNul = TRUE)
##Re-weighted to 2000=100
#rw_assets <- assets
#for(i in 2:8) {
#    rw_assets[,i] <- assets[,i]/mean(assets[1:4,i])*100
#}
index_plot <- cbind(all_indices[,c(1,6,10)],assets[,c(6,7,8)])
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
##Compared to other assets
index_plot <- cbind(all_indices[,c(1,6,10)],assets[,c(2,3,4)])
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
write.csv(all_indices, "all_indices.csv")
#Make them real
real_indices <- all_indices
for(i in 2:ncol(all_indices)) {
for(j in 1:64) {
real_indices[j,i] <- all_indices[j,i]/assets$CPI[j]*100
}
}
##Compared to other assets
index_plot <- melt(real_indices, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
View(real_indices)
##Compared to other assets
index_plot <- melt(real_indices[,c(-3,-8)], id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
#Calculate test statistics
y_indices <- log(real_indices[,-1])
bubble.nc <- list()
bubble.c <- list()
for(i in 1:ncol(y_indices)) {
bubble1 <- numeric()
bubble2 <- numeric()
for(j in 12:64) {
y <- y_indices[1:j,i]
toets1 <- ur.df(y, type= "none", lags = 4, selectlags = c("AIC"))
toets2 <- ur.df(y, type= "drift", lags = 4, selectlags = c("AIC"))
bubble1 <- rbind(bubble1,toets1@teststat)
bubble2 <- rbind(bubble2,toets2@teststat)
}
bubble.nc[[i]] <- bubble1
bubble.c[[i]] <- bubble2
}
##--------------------------------------------------------------------------
#Calculate critical values
K1 <- numeric()
K2 <- numeric()
K3 <- numeric()
K4 <- numeric()
for(j in 12:64) {
set.seed(123)                           #for replicability
reps <- 2000                            #Monte Carlo replications
burn <- 100                             #burn in periods: first generate a T+B sample
#obs <- 62                              #To make "sure" that influence of initial values has faded
obs <- j                                #ultimate sample size
tstat.nc <- numeric()
tstat.c <- numeric()
tstat.ct <- numeric()
tstat.lc <- numeric()
for(i in 1:reps) {
e <- rnorm(obs+burn)
e[1] <- 0
Y1 <- cumsum(e)
DY1 <- diff(Y1)
y1 <- Y1[(burn+1):(obs+burn)]               #trim off burn period
dy1 <- DY1[(burn+1):(obs+burn)]
ly1 <- Y1[burn:(obs+burn-1)]
trend <- 1:obs
EQ1 <- lm(dy1 ~ 0 + ly1)
tstat.nc <- rbind(tstat.nc,summary(EQ1)$coefficients[1,3])
EQ2 <- lm(dy1 ~ ly1)
tstat.c <- rbind(tstat.c,summary(EQ2)$coefficients[2,3])
}
#hist(tstat.nc)
K1 <- rbind(K1,quantile(tstat.nc, probs=c(0.9,0.95,0.99)))
K2 <- rbind(K2,quantile(tstat.c, probs=c(0.9,0.95,0.99)))
}   #Provides a vector of critical values
##---------------------------------------------------------------------------
bubble.test1 <- numeric()
bubble.test2 <- numeric()
for(k in 1:9) {
bubble.test1 <- cbind(bubble.test1,bubble.nc[[k]])
bubble.test2 <- cbind(bubble.test2,bubble.c[[k]][1:53])
}
bubble.test1 <- as.data.frame(bubble.test1)
bubble.test2 <- as.data.frame(bubble.test2)
bubble.test1 <- cbind(bubble.test1,K1)
bubble.test2 <- cbind(bubble.test2,K2)
Dates <- levels(artdata$timedummy)[-1:-11]
bubble.test1$Date <- Dates
bubble.test2$Date <- Dates
colnames(bubble.test1)[1:9] <- colnames(all_indices[-1])
colnames(bubble.test2)[1:9] <- colnames(all_indices[-1])
index_plot <- bubble.test1[,c(1,4,9,11,12,13)]
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(1,1,1,4,4))
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
index_plot <- bubble.test2[,c(1,4,9,11,12,13)]
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(1,1,1,4,4))
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
#----------------------------------------------------------------------------------------------------------------------------
#report  bubble period dates
datum1 <- data.frame()
datum2 <- data.frame()
datums1 <- data.frame()
datums2 <- data.frame()
bubble.test1 <- bubble.test1[,c(-1,-7)]
bubble.test2 <- bubble.test2[,c(-1,-7)]
for(i in 1:7) {
for(l in 1:53) {
if(bubble.test1[l,i]>bubble.test1$"95%"[l]) {
datum1[l,i] <- bubble.test1[l,"Date"]
}
if(bubble.test2[l,i]>bubble.test2$"95%"[l]) {
datum2[l,i] <- bubble.test2[l,"Date"]
}
}
NonNAindex <- which(!is.na(datum1[,i]))
firstNonNA <- min(NonNAindex)
datums1[1,i] <- datum1[firstNonNA,i]
if (NonNAindex[NROW(NonNAindex)-1]==(max(NonNAindex)-1)) {
lastNonNA <- max(NonNAindex)
} else lastNonNA <- NonNAindex[NROW(NonNAindex)-1]
datums1[2,i] <- datum1[lastNonNA,i]
NonNAindex <- which(!is.na(datum2[,i]))
firstNonNA <- min(NonNAindex)
datums2[1,i] <- datum2[firstNonNA,i]
lastNonNA <- max(NonNAindex)
datums2[2,i] <- datum2[lastNonNA,i]
}
datums <- rbind(datums1,datums2)
colnames(datums) <- colnames(bubble.test1)[1:7]
rownames(datums) <- c("None-Start","None-End","Drift-Start","Drift-End")
datums <- t(datums)
xt <- xtable(datums, caption="Dates of explosive behaviour")
print(xt, "latex",comment=FALSE, caption.placement = getOption("xtable.caption.placement", "top"))
index_plot <- bubble.test1[,c(1,5,9,11,12,13)]
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(1,1,1,4,4))
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
index_plot <- bubble.test2[,c(1,5,9,11,12,13)]
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(1,1,1,4,4))
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
View(bubble.test1)
bubble.test1 <- numeric()
bubble.test2 <- numeric()
for(k in 1:9) {
bubble.test1 <- cbind(bubble.test1,bubble.nc[[k]])
bubble.test2 <- cbind(bubble.test2,bubble.c[[k]][1:53])
}
bubble.test1 <- as.data.frame(bubble.test1)
bubble.test2 <- as.data.frame(bubble.test2)
bubble.test1 <- cbind(bubble.test1,K1)
bubble.test2 <- cbind(bubble.test2,K2)
Dates <- levels(artdata$timedummy)[-1:-11]
bubble.test1$Date <- Dates
bubble.test2$Date <- Dates
colnames(bubble.test1)[1:9] <- colnames(all_indices[-1])
colnames(bubble.test2)[1:9] <- colnames(all_indices[-1])
index_plot <- bubble.test1[,c(1,5,9,11,12,13)]
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(1,1,1,4,4))
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
index_plot <- bubble.test2[,c(1,5,9,11,12,13)]
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(1,1,1,4,4))
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
summary(toets2)
summary(toets1)
EQ5 <- nls(dy1 ~ a*constant^b + c*ly1, start = list(a=-0.2,b=-100, c=-0.3))
constant <- seq(obs,obs,length.out = obs)
EQ5 <- nls(dy1 ~ a*constant^b + c*ly1, start = list(a=-0.2,b=-100, c=-0.3))
nls(dy1 ~ constant^b + c*ly1, start = list(a=-0.2,b=-100, c=-0.3))
nls(dy1 ~ constant^b + c*ly1)
nls(dy1 ~ constant^b + ly1)
nls(dy1 ~ constant^b + c*ly1, start = list(b=-.01, c=-0.3))
nls(dy1 ~ 0 + constant^b + c*ly1, start = list(b=-.01, c=-0.3))
constant0.1 <- seq(obs^-0.1,obs^-0.1,length.out = obs)
constant5 <- seq(obs^-5,obs^-5,length.out = obs)
EQ3 <- lm(dy1 ~ 0 + constant0.1 + ly1)
tstat.lc1 <- rbind(tstat.ct,summary(EQ3)$coefficients[2,3])
EQ4 <- lm(dy1 ~ 0 + constant5 + ly1)
tstat.lc2 <- rbind(tstat.lc,summary(EQ4)$coefficients[2,3])
K1 <- numeric()
K2 <- numeric()
K3 <- numeric()
K4 <- numeric()
#b <- numeric()
for(j in 12:64) {
set.seed(123)                           #for replicability
reps <- 2000                            #Monte Carlo replications
burn <- 100                             #burn in periods: first generate a T+B sample
#obs <- 62                              #To make "sure" that influence of initial values has faded
obs <- j                                #ultimate sample size
tstat.nc <- numeric()
tstat.c <- numeric()
tstat.ct <- numeric()
tstat.lc <- numeric()
for(i in 1:reps) {
e <- rnorm(obs+burn)
e[1] <- 0
Y1 <- cumsum(e)
DY1 <- diff(Y1)
y1 <- Y1[(burn+1):(obs+burn)]               #trim off burn period
dy1 <- DY1[(burn+1):(obs+burn)]
ly1 <- Y1[burn:(obs+burn-1)]
trend <- 1:obs
constant <- seq(obs,obs,length.out = obs)
constant0.01 <- seq(obs^-0.01,obs^-0.1,length.out = obs)
constant5 <- seq(obs^-5,obs^-5,length.out = obs)
EQ1 <- lm(dy1 ~ 0 + ly1)
tstat.nc <- rbind(tstat.nc,summary(EQ1)$coefficients[1,3])
EQ2 <- lm(dy1 ~ ly1)
tstat.c <- rbind(tstat.c,summary(EQ2)$coefficients[2,3])
#EQ5 <- nls(dy1 ~ constant^b + c*ly1, start = list(b=-.01, c=-0.3))
#tstat.ct <- rbind(tstat.ct,summary(EQ5)$coefficients[2,3])
EQ3 <- lm(dy1 ~ 0 + constant0.01 + ly1)
tstat.lc1 <- rbind(tstat.ct,summary(EQ3)$coefficients[2,3])
EQ4 <- lm(dy1 ~ 0 + constant5 + ly1)
tstat.lc2 <- rbind(tstat.lc,summary(EQ4)$coefficients[2,3])
}
#hist(tstat.nc)
K1 <- rbind(K1,quantile(tstat.nc, probs=c(0.9,0.95,0.99)))
K2 <- rbind(K2,quantile(tstat.c, probs=c(0.9,0.95,0.99)))
K3 <- rbind(K3,quantile(tstat.lc1, probs= c(0.9,0.95,0.99)))
K4 <- rbind(K4,quantile(tstat.lc2, probs= c(0.9,0.95,0.99)))
}   #Provides a vector of critical values
View(K3)
View(K4)
max(K1)
max(K2)
View(K1)
View(K3)
View(K2)
EQ1 <- lm(y1 ~ 0 + ly1)
EQ2 <- lm(y1 ~ ly1)
summary(EQ1)
summary(EQ2)
EQ1 <- lm(dy1 ~ 0 + ly1)
EQ2 <- lm(dy1 ~ ly1)
summary(EQ2)
View(tstat.nc)
hist(tstat.nc)
hist(tstat.c)
K1 <- numeric()
K2 <- numeric()
#K3 <- numeric()
#K4 <- numeric()
#b <- numeric()
for(j in 12:64) {
set.seed(123)                           #for replicability
reps <- 3000                            #Monte Carlo replications
burn <- 100                             #burn in periods: first generate a T+B sample
#obs <- 62                              #To make "sure" that influence of initial values has faded
obs <- j                                #ultimate sample size
tstat.nc <- numeric()
tstat.c <- numeric()
tstat.ct <- numeric()
tstat.lc <- numeric()
for(i in 1:reps) {
e <- rnorm(obs+burn)
e[1] <- 0
Y1 <- cumsum(e)
DY1 <- diff(Y1)
y1 <- Y1[(burn+1):(obs+burn)]               #trim off burn period
dy1 <- DY1[(burn+1):(obs+burn)]
ly1 <- Y1[burn:(obs+burn-1)]
trend <- 1:obs
#constant <- seq(obs,obs,length.out = obs)
#constant0.01 <- seq(obs^-0.01,obs^-0.1,length.out = obs)
#constant5 <- seq(obs^-5,obs^-5,length.out = obs)
EQ1 <- lm(dy1 ~ 0 + ly1)
tstat.nc <- rbind(tstat.nc,summary(EQ1)$coefficients[1,3])
EQ2 <- lm(dy1 ~ ly1)
tstat.c <- rbind(tstat.c,summary(EQ2)$coefficients[2,3])
#EQ5 <- nls(dy1 ~ constant^b + c*ly1, start = list(b=-.01, c=-0.3))
#tstat.ct <- rbind(tstat.ct,summary(EQ5)$coefficients[2,3])
#EQ3 <- lm(dy1 ~ 0 + constant0.01 + ly1)
#tstat.lc1 <- rbind(tstat.ct,summary(EQ3)$coefficients[2,3])
#EQ4 <- lm(dy1 ~ 0 + constant5 + ly1)
#tstat.lc2 <- rbind(tstat.lc,summary(EQ4)$coefficients[2,3])
}
#hist(tstat.nc)
K1 <- rbind(K1,quantile(tstat.nc, probs=c(0.95,0.99)))
K2 <- rbind(K2,quantile(tstat.c, probs=c(0.95,0.99)))
#K3 <- rbind(K3,quantile(tstat.lc1, probs= c(0.9,0.95,0.99)))
#K4 <- rbind(K4,quantile(tstat.lc2, probs= c(0.9,0.95,0.99)))
}   #Provides a vector of critical values
max(bubble.nc)
max(bubble.c)
for(i in 1:9) {
max(bubble.nc[,i])
max(bubble.c[,i])
}
for(i in 1:9) {
max(bubble.test1[,i])
max(bubble.test2[,i])
}
for(i in 1:9) {
sup[i,1] <- max(bubble.test1[,i])
sup[i,2] <- max(bubble.test2[,i])
}
sup <- data.frame()
for(i in 1:9) {
sup[i,1] <- max(bubble.test1[,i])
sup[i,2] <- max(bubble.test2[,i])
}
View(sup)
sup[10,1] <- bubble.test1[53,11]
sup[11,1] <- bubble.test1[53,12]
sup[10,2] <- bubble.test2[53,11]
sup[11,2] <- bubble.test2[53,12]
#----------------------------------------------------------------------------------------------------------------------------
#report  bubble period dates
datum1 <- data.frame()
datum2 <- data.frame()
datums1 <- data.frame()
datums2 <- data.frame()
bubble.test1 <- bubble.test1[,c(-1,-7)]
bubble.test2 <- bubble.test2[,c(-1,-7)]
for(i in 1:7) {
for(l in 1:53) {
if(bubble.test1[l,i]>bubble.test1$"95%"[l]) {
datum1[l,i] <- bubble.test1[l,"Date"]
}
if(bubble.test2[l,i]>bubble.test2$"95%"[l]) {
datum2[l,i] <- bubble.test2[l,"Date"]
}
}
NonNAindex <- which(!is.na(datum1[,i]))
firstNonNA <- min(NonNAindex)
datums1[1,i] <- datum1[firstNonNA,i]
if (NonNAindex[NROW(NonNAindex)-1]==(max(NonNAindex)-1)) {
lastNonNA <- max(NonNAindex)
} else lastNonNA <- NonNAindex[NROW(NonNAindex)-1]
datums1[2,i] <- datum1[lastNonNA,i]
NonNAindex <- which(!is.na(datum2[,i]))
firstNonNA <- min(NonNAindex)
datums2[1,i] <- datum2[firstNonNA,i]
lastNonNA <- max(NonNAindex)
datums2[2,i] <- datum2[lastNonNA,i]
}
datums <- rbind(datums1,datums2)
colnames(datums) <- colnames(bubble.test1)[1:7]
rownames(datums) <- c("None-Start","None-End","Drift-Start","Drift-End")
datums <- t(datums)
xt <- xtable(datums, caption="Dates of explosive behaviour")
print(xt, "latex",comment=FALSE, caption.placement = getOption("xtable.caption.placement", "top"))
xt
datums
View(repdata)
View(rsartdata)
