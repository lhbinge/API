g <- g + geom_point(size = 1)
g <- g + geom_line()
g <- g + ylab("Index") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.position="bottom") + theme(legend.title=element_blank())
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
rm(ketting2,naive_index,strat_p,strat_q)
##-------------##
##---HEDONIC---##
##-------------##
#-------------------
# FULL SAMPLE MODEL
#-------------------
full_model <- function(data, list_expl_vars=c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed", "dum_dated",
"nr_works","artist","lnarea:med_code","timedummy")) {
modeldata <- data
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
model_all <- lm(expl_vars, data=modeldata)
time_results <- summary(model_all)$coefficients[grepl("timedummy", rownames(summary(model_all)$coefficients)),1]
time_results <- as.data.frame(time_results)
time_results$Index <- exp(time_results$time_results)*100
time_results$Date <- sub("timedummy","",row.names(time_results))
time_results <- merge(datums,time_results,by="Date",all=TRUE)[,c(1,4)]
return(time_results)
}
#data <- artdata
#-----------------------------
# OVERLAPPING PERIODS (1-year)
#-----------------------------
overlap1y_model <- function(data, list_expl_vars=c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed", "dum_dated",
"nr_works","artist","lnarea:med_code","timedummy")) {
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
res_list <- list()
for(i in 1:16) {
modeldata <- data
modeldata <- subset(modeldata, modeldata$counter>(i*4-5)& modeldata$counter<(i*4+1))
model <- lm(expl_vars, data=modeldata)
time_results <- as.data.frame(summary(model)$coefficients[grepl("timedummy", rownames(summary(model)$coefficients)),1])
time_results$Date <- sub("timedummy","",row.names(time_results))
colnames(time_results) <- c("Coef","Date")
res_list[[i]] <- time_results
}
#Merge all results
overlap <- rep_results
overlap <- merge(overlap, res_list[[1]], by="Date", all=TRUE)
overlap[,3] <- exp(overlap[,3])*100
for(i in 2:16) {
overlap <- merge(overlap, res_list[[i]], by = "Date",all=TRUE)
overlap[,(i+2)] <- exp(overlap[i+2])*100
}
#Calculate index
overlap$ind <- overlap[,3]
overlap[2,19] <- overlap[3,19]*overlap[2,2]/overlap[3,2]   #Interpolate
overlap$teller <- as.numeric(substring(overlap$Date,1,4))-1997
for(i in 3:62) {
j <- overlap[(i+1),20]
if(is.na(overlap[i,j])) {
overlap[(i+1),19] <- overlap[i,19]*overlap[(i+1),j]/100
} else {
overlap[(i+1),19] <- overlap[i,19]*overlap[(i+1),j]/overlap[i,j]
}
}
colnames(overlap) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5","Index_m6",
"Index_m7","Index_m8","Index_m9","Index_m10","Index_m11","Index_m12","Index_m13",
"Index_m14","Index_m15","Index_m16","Index_Adjacent1y","teller")
overlap$Date <- factor(levels(artdata$timedummy)[-1])
return(overlap)
}
#-----------------------------
# OVERLAPPING PERIODS (2-year)
#-----------------------------
overlap2y_model <- function(artdata, list_expl_vars=c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed", "dum_dated",
"nr_works","artist","lnarea:med_code","timedummy")) {
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
res_list <- list()
for(i in 1:8) {
modeldata <- artdata
modeldata <- subset(modeldata, modeldata$counter>(i*8-9)& modeldata$counter<(i*8+1))
model <- lm(expl_vars, data=modeldata)
time_results <- as.data.frame(summary(model)$coefficients[grepl("timedummy", rownames(summary(model)$coefficients)),1])
time_results$Date <- sub("timedummy","",row.names(time_results))
colnames(time_results) <- c("Coef","Date")
res_list[[i]] <- time_results
}
#Merge all results
overlap2 <- rep_results
overlap2 <- merge(overlap2, res_list[[1]], by="Date", all=TRUE)
overlap2[,3] <- exp(overlap2[,3])*100
for(i in 2:8) {
overlap2 <- merge(overlap2, res_list[[i]], by = "Date", all=TRUE)
overlap2[,(i+2)] <- exp(overlap2[i+2])*100
}
#Calculate index
overlap2$ind <- overlap2[,3]
overlap2[2,11] <- overlap2[3,11]*overlap2[2,2]/overlap2[3,2]   #Interpolate
overlap2$teller <- c(3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10)
for(i in 7:62) {
j <- overlap2[(i+1),12]
if(is.na(overlap2[i,j])) {
overlap2[(i+1),11] <- overlap2[i,11]*overlap2[(i+1),j]/100
} else {
overlap2[(i+1),11] <- overlap2[i,11]*overlap2[(i+1),j]/overlap2[i,j]
}
}
colnames(overlap2) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5",
"Index_m6","Index_m7","Index_m8","Index_Adj2y","teller")
overlap2$Date <- factor(levels(artdata$timedummy)[-1])
return(overlap2)
}
#----------------------
#ROLLING 5-YEAR WINDOWS
#----------------------
rolling_model <- function(artdata, list_expl_vars=c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed", "dum_dated",
"nr_works","artist","lnarea:med_code","timedummy")) {
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
res_list <- list()
for(i in 1:12) {
modeldata <- artdata
modeldata <- subset(modeldata, modeldata$counter>(i*4-4)&modeldata$counter<(i*4+17))
model <- lm(expl_vars, data=modeldata)
time_results <- as.data.frame(summary(model)$coefficients[grepl("timedummy", rownames(summary(model)$coefficients)),1])
time_results$Date <- sub("timedummy","",row.names(time_results))
colnames(time_results) <- c("Coef","Date")
res_list[[i]] <- time_results
}
#Merge all results
rolling <- rep_results
rolling <- merge(rolling, res_list[[1]], by="Date", all=TRUE)
rolling[,3] <- exp(rolling[,3])*100
for(i in 2:12) {
rolling <- merge(rolling, res_list[[i]], by = "Date", all=TRUE)
rolling[,(i+2)] <- exp(rolling[i+2])*100
}
#Calculate index
rolling$ind <- rolling[,3]
rolling[2,15] <- rolling[3,15]*rolling[2,2]/rolling[3,2]  #interpolate
rolling$teller <- c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,
10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14)
for(i in 19:62) {  #chaining
j <- rolling[(i+1),16]
rolling[(i+1),15] <- rolling[i,15]*rolling[(i+1),j]/rolling[i,j]
}
colnames(rolling) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5","Index_m6",
"Index_m7","Index_m8","Index_m9","Index_m10","Index_m11","Index_m12","Index_Rolling","teller")
rolling$Date <- factor(levels(artdata$timedummy)[-1])
return(rolling)
}
#========================================================================================
list_expl_vars <- c("lnarea","ah_code","med_code","dum_signed","dum_dated",
"nr_works","lnrep","lnarea:med_code","timedummy")
rep_results <- full_model(artdata,list_expl_vars)
suppressMessages(rep_overlap1 <- overlap1y_model(artdata,list_expl_vars))
suppressMessages(rep_overlap2 <- overlap2y_model(artdata,list_expl_vars))
suppressMessages(rep_rolling <- rolling_model(artdata,list_expl_vars))
#list_expl_vars2 <- c("lnarea","lnarea2","ah_code","med_code","dum_signed","dum_dated",
#                    "nr_works","lnrep","lnarea:med_code","lnarea*lnrep","lnrep:med_code","timedummy")
#rep_results2 <- full_model(artdata,list_expl_vars2)
#----------------------------------------------
hedonic_indices <- rep_overlap1[,c(1,2)]
colnames(hedonic_indices) <- c("Date","Hedonic_full")
hedonic_indices <- cbind(hedonic_indices,Adjacent_1y=rep_overlap1[,19])
hedonic_indices <- cbind(hedonic_indices,Adjacent_2y=rep_overlap2[,11])
hedonic_indices <- cbind(hedonic_indices,Rolling_5y=rep_rolling[,15])
hedonic_indices <- cbind(Date=factor(levels(artdata$timedummy)),
rbind(c(seq(100,100, length.out=4)),hedonic_indices[,-1]))
#--------------------------------------------------------------------------
#Full model for regression results
list_expl_vars <- c("lnarea","ah_code","med_code","dum_signed","dum_dated",
"nr_works","lnrep","lnarea:med_code","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
modeldata <- artdata
model2 <- lm(expl_vars, data=modeldata)
stargazer(model2, title = "Hedonic Regression results", omit=c("lnarea:med_code","timedummy"),
omit.labels = c("Medium Size Interactions","Quarterly dummies"), header=FALSE, single.row = TRUE, type = "latex",
table.placement = "!h")
#---------------------------------------------------------------------------
index_plot <- melt(rep_overlap2[,c(-2,-12)], id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line()
g <- g + ylab("Index") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
index_plot <- melt(hedonic_indices, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line()
g <- g + ylab("Index") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.position="bottom") + theme(legend.title=element_blank())
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
rm(rep_overlap1,rep_overlap2,rep_rolling)
##=====================##
## REPEAT SALES METHOD ##
##=====================##
#check for duplicates (how many)
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated","nr_works")]))
allDup <- function(value) {  #identify duplicated values
duplicated(value) | duplicated(value, fromLast = TRUE)
}
rsartdata <- artdata[allDup(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated","nr_works")]),]
rsartdata <- transform(rsartdata, id = as.numeric(interaction(artist,factor(title),med_code,factor(area),factor(dum_signed),
factor(dum_dated), factor(nr_works),drop=TRUE)))
repdata <- repsaledata(rsartdata$lnprice,rsartdata$counter,rsartdata$id)  #transform the data to sales pairs
repdata <- repdata[complete.cases(repdata),]
repeatsales <- repsale(repdata$price0,repdata$time0,repdata$price1,repdata$time1,mergefirst=1,
graph=FALSE)   #generate the repeat sales index
RS_index <- exp(as.data.frame(repeatsales$pindex))*100
n <- as.numeric(sub("Time ","",row.names(RS_index)))
n[1] <- 1
RS_index$Date <- levels(rsartdata$timedummy)[unique(c(repdata$time0,repdata$time1))[order(unique(c(repdata$time0,repdata$time1)))]][n] #missing values
RS_index <- merge(datums,RS_index, by="Date", all=TRUE)[,-2]
colnames(RS_index) <- c("Date","Repeat Sales_Index")
index_plot <- melt(RS_index, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line()
g <- g + ylab("Index") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
##------------------------------------------------------------------
##--------------- Pseudo Repeat Sales ------------------------------
##------------------------------------------------------------------
#do the same but expand it to not match by title - i.e. all other attributes are the same
#check for duplicates (how many)
sum(duplicated(artdata[,c("artist","med_code","area","dum_signed","dum_dated","nr_works")]))
rsartdata1 <- artdata[allDup(artdata[,c("artist","med_code","area","dum_signed","dum_dated","nr_works")]),]
rsartdata1 <- transform(rsartdata1, id = as.numeric(interaction(artist,med_code,factor(area),factor(dum_signed),
factor(dum_dated),factor(nr_works), drop=TRUE)))
repdata1 <- cbind(repsaledata(rsartdata1$lnprice,rsartdata1$counter,rsartdata1$id),
repsaledata(rsartdata1$ah_code,rsartdata1$counter,rsartdata1$id)[,4:5]) #transform the data to sales pairs
repdata1 <- repdata1[complete.cases(repdata1),]
colnames(repdata1) <- c("id","time0","time1","price0","price1","ah_code0","ah_code1")
dy <- repdata1$price1 - repdata1$price0
ah0 <- model.matrix(~repdata1$ah_code0)
ah1 <- model.matrix(~repdata1$ah_code1)
dah <- ah1 - ah0
timevar <- levels(factor(c(repdata1$time0, repdata1$time1)))
nt = length(timevar)
n = length(dy)
xmat <- array(0, dim = c(n, nt - 1))
for (j in seq(1 + 1, nt)) {
xmat[,j-1] <- ifelse(repdata1$time1 == timevar[j], 1, xmat[,j-1])
xmat[,j-1] <- ifelse(repdata1$time0 == timevar[j],-1, xmat[,j-1])
}
colnames(xmat) <- paste("Time", seq(1 + 1, nt))
ps.RS <- lm(dy ~ dah + xmat + 0)
RS_index1 <- summary(ps.RS)$coefficients[grepl("Time", rownames(summary(ps.RS)$coefficients)),1]
RS_index1 <- as.data.frame(RS_index1)
RS_index1$index <- exp(RS_index1$RS_index1)*100
RS_index1$Date <- levels(rsartdata1$timedummy)[-1]
RS_index1 <- RS_index1[,c(2,3)]
##=====================##
#do the same but expand it to not match by title or authenticity dummies
#check for duplicates (how many)
sum(duplicated(artdata[,c("artist","med_code","area","nr_works")]))
rsartdata2 <- artdata[allDup(artdata[,c("artist","med_code","area","nr_works")]),]
rsartdata2 <- transform(rsartdata2, id = as.numeric(interaction(artist,med_code,factor(area),factor(nr_works), drop=TRUE)))
repdata2 <- cbind(repsaledata(rsartdata2$lnprice,rsartdata2$counter,rsartdata2$id),
repsaledata(rsartdata2$ah_code,rsartdata2$counter,rsartdata2$id)[,4:5],
repsaledata(rsartdata2$dum_signed,rsartdata2$counter,rsartdata2$id)[,4:5],
repsaledata(rsartdata2$dum_dated,rsartdata2$counter,rsartdata2$id)[,4:5])
repdata2 <- repdata2[complete.cases(repdata2),]
colnames(repdata2) <- c("id","time0","time1","price0","price1","ah_code0","ah_code1","sign0","sign1","date0","date1")
dy <- repdata2$price1 - repdata2$price0
dsign <- repdata2$sign1 - repdata2$sign0
ddate <- repdata2$date1 - repdata2$date0
ah0 <- model.matrix(~repdata2$ah_code0)
ah1 <- model.matrix(~repdata2$ah_code1)
dah <- ah1 - ah0
timevar <- levels(factor(c(repdata2$time0, repdata2$time1)))
nt = length(timevar)
n = length(dy)
xmat <- array(0, dim = c(n, nt - 1))
for (j in seq(1 + 1, nt)) {
xmat[,j-1] <- ifelse(repdata2$time1 == timevar[j], 1, xmat[,j-1])
xmat[,j-1] <- ifelse(repdata2$time0 == timevar[j],-1, xmat[,j-1])
}
colnames(xmat) <- paste("Time", seq(1 + 1, nt))
ps.RS <- lm(dy ~ dah + dsign + ddate + xmat + 0)
RS_index2 <- summary(ps.RS)$coefficients[grepl("Time", rownames(summary(ps.RS)$coefficients)),1]
RS_index2 <- as.data.frame(RS_index2)
RS_index2$index <- exp(RS_index2$RS_index2)*100
RS_index2$Date <- levels(rsartdata2$timedummy)[-1]
RS_index2 <- RS_index2[,c(2,3)]
#------------------------------------------------------------------------
RS_indices <- merge(RS_index, RS_index1, by="Date", all=TRUE)
RS_indices <- merge(RS_indices, RS_index2, by="Date", all=TRUE)
RS_indices <- cbind(Date=factor(levels(artdata$timedummy)),
rbind(c(seq(100,100, length.out=3)),RS_indices[,-1]))
colnames(RS_indices) <- c("Date","Repeat Sales","pseudo-RS1","pseudo-RS2")
#maak_indeks <- function(indeks) {
#    indeks[,2] <- indeks[,2]/mean(indeks[1:4,2],na.rm=TRUE)*100
#    indeks[,3] <- indeks[,3]/mean(indeks[1:4,3],na.rm=TRUE)*100
#    indeks[,4] <- indeks[,4]/mean(indeks[1:4,4],na.rm=TRUE)*100
#    return(indeks)
#}
#RS_indices1 <- maak_indeks(RS_indices)
#------------------------------------------------------------------------
index_plot <- melt(RS_indices[,-2], id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line()
g <- g + ylab("Index") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
rm(ah0,ah1,dah,xmat,repdata,repdata1,repdata2,RS_index,RS_index1,RS_index2)
rm(rsartdata,rsartdata1,rsartdata2)
all_indices <- cbind(naive_indices,hedonic_indices[-1],RS_indices[-1])
all_indices[is.na(all_indices)]<- 100
#Load pre-calculated indices
#write.csv(all_indices, "all_indices.csv")
#all_indices <- read.csv("all_indices.csv", header=TRUE, na.strings = "", skipNul = TRUE)
index_plot <- melt(all_indices[,c(1,2,5,10)], id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 1)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(4,1,2))
g <- g + ylab("Index") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
source("corstarsl.R")
temp_indices <- all_indices[-1:-3,]
colnames(temp_indices) <- c("Date","Median","Fisher","Hedonic","Adj1y","Adj2y","Roll","RepSale","ps.RS1","ps.RS2")
for(i in 2:ncol(temp_indices)) {temp_indices[,i] <- as.numeric(temp_indices[,i]) }
ts.all_indices <- as.ts(temp_indices[,-1],start =c(2000,4),end=c(2015,4),frequency=4)
#xt <- xtable(corstarsl(ts.all_indices), caption="Correlations in Levels")
#print(xt, "latex",comment=FALSE, caption.placement = getOption("xtable.caption.placement", "top"))
returns <- as.data.frame(diff(log(ts.all_indices)))
corstarsl(returns)
corstarsl(returns)
View(returns)
check <- corstarsl(returns)
View(check)
ac.1 <- numeric()
eval <- data.frame()
HPdev <- numeric()
smoothness <- numeric()
vol <- apply(returns,MARGIN=2, FUN=sd, na.rm=TRUE)
for(i in 1:ncol(returns)) {
ac.1[i] <- acf(returns,na.action = na.pass, plot = FALSE, lag.max = 1)$acf[,,i][2,i]
}
hp <- temp_indices
for(i in 2:10) {
hp[,i] <- hpfilter(temp_indices[,i],freq = 1600)[2]
}
ts.hp <- as.ts(hp[,-1],start =c(2000,1),end=c(2015,4),frequency=4)
hpreturns <- as.data.frame(diff(log(ts.hp)))
for(i in 1:ncol(returns)) {
HPdev[i] <- sum((hpreturns[,i] - returns[,i])^2)
}
#spectral density
smooth <- function (datavec,k,l) {     # calculates smoothness coefficient for 'datavec' with
# 'k' specifies the width of the Daniell window which smooths the raw periodogram
## Step 1: Calculate and record power spectral density using 'speccalcs'
speccalcs <- spec.pgram(datavec,spans=c(k,l),demean=TRUE,plot=FALSE)
spectra <- speccalcs$spec
## Step 2 Take natural logs of power spectral frequencies
logspec <- log(spectra)
n <- length(logspec)
m <- n/2
p1 <- mean(logspec[1:m])
p2 <- mean(logspec[(m+1):n])
smcoef <- p1-p2
smcoefvar <- (pi^2)/6*((1/m)+(1/(n-m)))
smcoefse <- sqrt(smcoefvar)
#list(smcoef,smcoefse)
return(smcoef)
}
for(i in 1:10) { smoothness[i] <- smooth(all_indices[,i],3,3) }
eval <- cbind(vol=vol,ac.1=ac.1[1:9],HPdev,smoothness=smoothness[-1])
View(eval)
mediums <- read.csv("mediums.csv", header=TRUE, sep=",",na.strings = "NA", skipNul = TRUE)
quant_results <- read.csv("quant_results.csv", header=TRUE, sep=",",na.strings = "", skipNul = TRUE)[,c(5,2,3,4)]
colnames(quant_results) <- c("Date","tau=0.25","tau=0.50","tau=0.75")
quant_results <- cbind(Date=factor(levels(artdata$timedummy)),
rbind(c(seq(100,100, length.out=2)),quant_results[,-1]))
summary(artdata$price)
#Segment by prices
source("full_model.R")
list_expl_vars <- c("lnarea","ah_code","med_code","dum_signed","dum_dated",
"nr_works","artist","med_code:lnarea","timedummy")
model4.1 <- full_model_a(artdata[artdata$price<=2400,],list_expl_vars)
model4.2 <- full_model_a(artdata[artdata$price>2400 & artdata$price<22000,],list_expl_vars)
model4.3 <- full_model_a(artdata[artdata$price>=22000,],list_expl_vars)
pr_seg <- cbind(model4.1[,c(1,2)],model4.2[,2],model4.3[,2])
colnames(pr_seg) <- c("Date", "Lower", "Middle", "Upper")
pr_seg <- cbind(Date=factor(levels(artdata$timedummy)),
rbind(c(seq(100,100, length.out=2)),pr_seg[,-1]))
#---------------------------------------------------
summary(artdata$ave_price)
source("full_model.R")
list_expl_vars <- c("lnarea","ah_code","med_code","dum_signed","dum_dated",
"nr_works","artist","med_code:lnarea","timedummy")
model4.1 <- full_model_a(artdata[artdata$ave_price>=1693,],list_expl_vars)
model4.2 <- full_model_a(artdata[artdata$ave_price>262 & artdata$ave_price<1693,],list_expl_vars)
model4.3 <- full_model_a(artdata[artdata$ave_price<=262,],list_expl_vars)
ave_seg <- cbind(model4.1,model4.2[,2],model4.3[,2])
colnames(ave_seg) <- c("Date", "Lower", "Middle", "Upper")
ave_seg <- cbind(Date=factor(levels(artdata$timedummy)),
rbind(c(seq(100,100, length.out=2)),ave_seg[,-1]))
make_real <- function(indeks) {
for(i in 2:ncol(indeks)) {
for(j in 1:64) {
indeks[j,i] <- indeks[j,i]/assets$CPI[j]*100
}
}
return(indeks)
}
real_indices <- make_real(all_indices)
index_plot <- melt(real_indices[,c(-3,-8)], id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"), frac = 1)
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_line()
g <- g + ylab("Index") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
#Calculate test statistics
y_indices <- log(real_indices[,-1])
bubble.nc <- list()
bubble.c <- list()
for(i in 1:ncol(y_indices)) {
bubble1 <- numeric()
bubble2 <- numeric()
for(j in 12:64) {
y <- y_indices[1:j,i]
toets1 <- ur.df(y, type= "none", lags = 4, selectlags = c("AIC"))
toets2 <- ur.df(y, type= "drift", lags = 4, selectlags = c("AIC"))
bubble1 <- rbind(bubble1,toets1@teststat)
bubble2 <- rbind(bubble2,toets2@teststat)
}
bubble.nc[[i]] <- bubble1
bubble.c[[i]] <- bubble2
}
##--------------------------------------------------------------------------
#Calculate critical values
K1 <- numeric()
K2 <- numeric()
for(j in 12:64) {
set.seed(123)                           #for replicability
reps <- 2000                            #Monte Carlo replications
burn <- 100                             #burn in periods: first generate a T+B sample
#obs <- 62                              #To make "sure" that influence of initial values has faded
obs <- j                                #ultimate sample size
tstat.nc <- numeric()
tstat.c <- numeric()
tstat.ct <- numeric()
tstat.lc <- numeric()
for(i in 1:reps) {
e <- rnorm(obs+burn)
e[1] <- 0
Y1 <- cumsum(e)
DY1 <- diff(Y1)
y1 <- Y1[(burn+1):(obs+burn)]               #trim off burn period
dy1 <- DY1[(burn+1):(obs+burn)]
ly1 <- Y1[burn:(obs+burn-1)]
trend <- 1:obs
EQ1 <- lm(dy1 ~ 0 + ly1)
tstat.nc <- rbind(tstat.nc,summary(EQ1)$coefficients[1,3])
EQ2 <- lm(dy1 ~ ly1)
tstat.c <- rbind(tstat.c,summary(EQ2)$coefficients[2,3])
}
#hist(tstat.nc)
K1 <- rbind(K1,quantile(tstat.nc, probs=c(0.9,0.95,0.99)))
K2 <- rbind(K2,quantile(tstat.c, probs=c(0.9,0.95,0.99)))
}   #Provides a vector of critical values
##---------------------------------------------------------------------------
bubble.test1 <- numeric()
bubble.test2 <- numeric()
for(k in 1:9) {
bubble.test1 <- cbind(bubble.test1,bubble.nc[[k]])
bubble.test2 <- cbind(bubble.test2,bubble.c[[k]][1:53])
}
bubble.test1 <- as.data.frame(bubble.test1)
bubble.test2 <- as.data.frame(bubble.test2)
bubble.test1 <- cbind(bubble.test1,K1)
bubble.test2 <- cbind(bubble.test2,K2)
Dates <- levels(artdata$timedummy)[-1:-11]
bubble.test1$Date <- Dates
bubble.test2$Date <- Dates
colnames(bubble.test1)[1:9] <- colnames(all_indices[-1])
colnames(bubble.test2)[1:9] <- colnames(all_indices[-1])
index_plot <- bubble.test1[,c(1,4,9,11,12,13)]
index_plot <- melt(index_plot, id="Date")  # convert to long format
index_plot$Date <- as.Date(as.yearqtr(index_plot$Date, format = "%Y Q%q"))
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 0.8)
g <- g + geom_line(aes(linetype=variable))
g <- g + scale_linetype_manual(values = c(6,1,5,3,3))
g <- g + ylab("") + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank()) + theme(legend.position="bottom")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
