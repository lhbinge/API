plotForecastErrors(rainseriesforecasts2$residuals)
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
skirtsseriesforecasts <- HoltWinters(skirtsseries, gamma=FALSE)
skirtsseriesforecasts
skirtsseriesforecasts$SSE
plot(skirtsseriesforecasts)
HoltWinters(skirtsseries, gamma=FALSE, l.start=608, b.start=9)
skirtsseriesforecasts2 <- forecast.HoltWinters(skirtsseriesforecasts, h=19)
plot.forecast(skirtsseriesforecasts2)
acf(skirtsseriesforecasts2$residuals, lag.max=20)
Box.test(skirtsseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(skirtsseriesforecasts2$residuals) # make a time plot
plotForecastErrors(skirtsseriesforecasts2$residuals)
souvenirtimeseriesforecasts <- HoltWinters(logsouvenirtimeseries)
souvenirtimeseriesforecasts
souvenirtimeseriesforecasts$SSE
plot(souvenirtimeseriesforecasts)
souvenirtimeseriesforecasts2 <- forecast.HoltWinters(souvenirtimeseriesforecasts, h=48)
plot.forecast(souvenirtimeseriesforecasts2)
acf(souvenirtimeseriesforecasts2$residuals, lag.max=20)
Box.test(souvenirtimeseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(souvenirtimeseriesforecasts2$residuals) # make a time plot
plotForecastErrors(souvenirtimeseriesforecasts2$residuals) # make a histogram
?matchIt
library("TTR")
library("forecast")
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
skirtsseriesforecasts <- HoltWinters(skirtsseries, gamma=FALSE)
skirtsseriesforecasts
skirtsseriesforecasts$SSE
plot(skirtsseriesforecasts)
HoltWinters(skirtsseries, gamma=FALSE, l.start=608, b.start=9)
skirtsseriesforecasts2 <- forecast.HoltWinters(skirtsseriesforecasts, h=19)
plot.forecast(skirtsseriesforecasts2)
acf(skirtsseriesforecasts2$residuals, lag.max=20)
Box.test(skirtsseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(skirtsseriesforecasts2$residuals) # make a time plot
plotForecastErrors(skirtsseriesforecasts2$residuals)
plotForecastErrors <- function(forecasterrors) {
# make a histogram of the forecast errors:
mybinsize <- IQR(forecasterrors)/4
mysd <- sd(forecasterrors)
mymin <- min(forecasterrors) - mysd*5
mymax <- max(forecasterrors) + mysd*3
# generate normally distributed data with mean 0 and standard deviation mysd
mynorm <- rnorm(10000, mean=0, sd=mysd)
mymin2 <- min(mynorm)
mymax2 <- max(mynorm)
if (mymin2 < mymin) { mymin <- mymin2 }
if (mymax2 > mymax) { mymax <- mymax2 }
# make a red histogram of the forecast errors, with the normally distributed data overlaid:
mybins <- seq(mymin, mymax, mybinsize)
hist(forecasterrors, col="red", freq=FALSE, breaks=mybins)
# freq=FALSE ensures the area under the histogram = 1
# generate normally distributed data with mean 0 and standard deviation mysd
myhist <- hist(mynorm, plot=FALSE, breaks=mybins)
# plot the normal curve as a blue line on top of the histogram of forecast errors:
points(myhist$mids, myhist$density, type="l", col="blue", lwd=2)
}
plotForecastErrors(skirtsseriesforecasts2$residuals)
skirtsseriesdiff1 <- diff(skirtsseries, differences=1)
plot.ts(skirtsseriesdiff1)
skirtsseriesdiff2 <- diff(skirtsseries, differences=2)
plot.ts(skirtsseriesdiff2)
install.packages("fUnitRoots")
library(fUnitRoots)
?fUnitRoots
??fUnitRoots
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kingstimeseries <- ts(kings)
kingstimeseries
kingstimeseriesSMA3 <- SMA(kingstimeseries,n=3)
plot.ts(kingstimeseriesSMA3)
kingstimeseriesSMA8 <- SMA(kingstimeseries,n=8)
plot.ts(kingstimeseriesSMA8)
kingtimeseriesdiff1 <- diff(kingstimeseries, differences=1)
plot.ts(kingtimeseriesdiff1)
acf(kingtimeseriesdiff1, lag.max=20) # plot a correlogram
acf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # get the autocorrelation values
pacf(kingtimeseriesdiff1, lag.max=20) # plot a partial correlogram
pacf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # get the partial autocorrelation values
auto.arima(kings)
volcanodust <- scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip=1)
volcanodustseries <- ts(volcanodust,start=c(1500))
plot.ts(volcanodustseries)
acf(volcanodustseries, lag.max=20) # plot a correlogram
acf(volcanodustseries, lag.max=20, plot=FALSE) # get the values of the autocorrelations
pacf(volcanodustseries, lag.max=20)
pacf(volcanodustseries, lag.max=20, plot=FALSE)
auto.arima(volcanodust)
auto.arima(volcanodust,ic="bic")
kingstimeseriesarima <- arima(kingstimeseries, order=c(0,1,1)) # fit an ARIMA(0,1,1) model
kingstimeseriesarima
forecast.Arima(kingstimeseriesarima,h=5, level=c(99.5))
kingstimeseriesforecasts <- forecast.Arima(kingstimeseriesarima, h=5)
kingstimeseriesforecasts
plot.forecast(kingstimeseriesforecasts)
acf(kingstimeseriesforecasts$residuals, lag.max=20)
Box.test(kingstimeseriesforecasts$residuals, lag=20, type="Ljung-Box")
plot.ts(kingstimeseriesforecasts$residuals) # make time plot of forecast errors
plotForecastErrors(kingstimeseriesforecasts$residuals) # make a histogram
volcanodustseriesarima <- arima(volcanodustseries, order=c(2,0,0))
volcanodustseriesarima
volcanodustseriesforecasts <- forecast.Arima(volcanodustseriesarima, h=31)
volcanodustseriesforecasts
plot.forecast(volcanodustseriesforecasts)
volcanodustseries
volcanodustseriesforecasts
plot(volcanodustseries$fitted)
plot(volcanodustarima)
plot(volcanodustseriesarima$x,col="red")
lines(fitted(volcanodustseriesarima),col="blue")
volcanodustseriesarima <- Arima(volcanodustseries, order=c(2,0,0))
plot(volcanodustseriesarima$x,col="red")
lines(fitted(volcanodustseriesarima),col="blue")
plot.forecast(volcanodustseriesforecasts)
acf(volcanodustseriesforecasts$residuals, lag.max=20)
Box.test(volcanodustseriesforecasts$residuals, lag=20, type="Ljung-Box")
plot.ts(volcanodustseriesforecasts$residuals) # make time plot of forecast errors
plotForecastErrors(volcanodustseriesforecasts$residuals) # make a histogram
mean(volcanodustseriesforecasts$residuals)
##===============================================================================================##
## -------------------------------- ART PRICE INDEX ---------------------------------------------##
##===============================================================================================##
##=====================##
## READING IN THE DATA ##
##=====================##
library(zoo)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(stargazer)
library(micEcon)
library(quantreg)
#setwd("C:/Users/Laurie/OneDrive/Documents/BING/METRICS/PhD Proposal Readings/Art Price Index")
setwd("C:\\Users\\Laurie\\OneDrive\\Documents\\BING\\PhD Proposal Readings\\Art Price Index\\R Code")
#library(rJava)
#library(xlsxjars)
#library(xlsx)
#artdata <- read.xlsx("Auction database.xlsx",sheetIndex=1,header=TRUE)
artdata <- read.csv("Auction database.csv", header=TRUE, sep=";",na.strings = "", skipNul = TRUE,
colClasses=c("character","numeric","numeric","numeric","numeric","factor","factor","factor","character",
"factor","factor","factor","character","factor","factor","factor","numeric","character",
"numeric","numeric","numeric","numeric","numeric","numeric"))
##===================##
## CLEANING THE DATA ##
##===================##
artdata$date <- as.Date(artdata$date)
artdata$med_code <- factor(artdata$med_code, labels=c("Drawing", "Watercolour", "Oil", "Acrylic", "Print/Woodcut",
"Mixed Media","Sculpture","Photography", "Other"))
artdata$ah_code <- factor(artdata$ah_code, labels=c("5th Avenue","Ashbeys","Bernardi","Bonhams","Russell Kaplan",
"Stephan Welz","Strauss","Christies"))
artdata$timedummy <- factor(as.yearqtr(artdata$date, "%Y-%m-%d"))
#artdata$timedummy <- factor(paste(artdata$year, artdata$quarter, sep="_")
#dummies = model.matrix(~artdata$timedummy)
#For every unique value in the string column, create a new 1/0 column
#This is what Factors do "under-the-hood" automatically when passed to function requiring numeric data
artdata$lnprice <- log(artdata$price)
artdata$lnarea <- log(artdata$area)
artdata$lnarea2 <- artdata$lnarea*artdata$lnarea
#artdata$lnsculpt_area <- 0
#artdata$lnsculpt_area[na.omit(artdata$med_code==7)] <- artdata$lnarea   #inteaction term: sculptures often only reported with 1 dimension (height)
artdata$lnsculpt_area <- ifelse(artdata$med_code=="Sculpture", artdata$lnarea, 0)
artdata$counter <- as.numeric(artdata$timedummy)
#source(themes)
#source(materials)
#change reference category with relevel()
#artdata$ah_code <- relevel(artdata$ah_code, ref = "Stephan Welz & Co")
#artdata$artist <- relevel(artdata$artist, ref = "Battiss, Walter Whall")
#artdata$med_code <- relevel(artdata$med_code, ref = "Oil")
#head(artdata)
#str(artdata)
##----------------------
##Rank Artists by Volume
##----------------------
#Rank by Total Volume (all)
rankings <- count(artdata, artist)
rankings$rank_all <- dense_rank(desc(rankings$n))    #rank by density, with no gaps between ranks
#rankings$rank_all <- row_number(desc(rankings$n))   #equivalent to rank(ties.method = "first")
#rankings$rank_all <- min_rank(desc(rankings$n))     #equivalent to rank(ties.method = "min")
rankings$n <- NULL
#rankings$rank_all <- factor(rankings$rank_all, labels=c)
#artdata <- merge(artdata, tel, by.x="artist", by.y="artist")
##Rank by Rolling 5-year window
for(i in 1:11) {
teller <- 1998+i
som <- count(artdata[(artdata$year>teller & artdata$year<(teller+6)),], artist)
som$rank_new <- dense_rank(desc(som$n))
# the alternative is to rank by row_number or min_rank
som$n <- NULL
colnames(som) <- c("artist", paste0("rank_", i))
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
}
#Rank Update
som <- count(artdata[(artdata$counter>42 & artdata$counter<63),], artist)
som$rank_new <- dense_rank(desc(som$n))  # rank by equivalent to rank(ties.method = "first")
# the alternative is to rank by row_number or min_rank
som$n <- NULL
colnames(som) <- c("artist", "rank_update")
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
##Rank by Annual Volume
for(i in 1:16) {
teller <- 1999+i
som <- count(artdata[(artdata$year==teller),], artist)
som$rank_new <- dense_rank(desc(som$n))
# the alternative is to rank by row_number or min_rank
som$n <- NULL
colnames(som) <- c("artist", paste0("rank_y", teller))
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
}
##Rank by 2-year Volume
for(i in 1:8) {
teller <- 1998+(i*2-1)
som <- count(artdata[(artdata$year>teller & artdata$year<(teller+3)),], artist)
som$rank_new <- dense_rank(desc(som$n))
# the alternative is to rank by row_number or min_rank
som$n <- NULL
colnames(som) <- c("artist", paste0("rank_a", i))
rankings <- merge(rankings, som, by.x="artist", by.y="artist",all.x=TRUE)
}
artdata <- merge(artdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
##===================##
## REGREESION MODELS ##
##===================##
list_expl_vars=c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","artist","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
#-------------------
# FULL SAMPLE MODEL
#-------------------
#source("full_model.R")
#time_results <- full_model(artdata)
modeldata <- subset(artdata, artdata$rank_all<max(artdata$rank_all,na.rm=TRUE))
model_all <- lm(expl_vars, data=modeldata)
time_results <- summary(model_all)$coefficients[grepl("time", rownames(summary(model_all)$coefficients)),1]
time_results <- as.data.frame(time_results)
time_results$index_all <- exp(time_results$time_results)*100
#stargazer(model_all, omit=c("artist","timedummy"))
#----------------------
#ROLLING 5-YEAR WINDOWS
#----------------------
#source("rolling_model.R")
#rolling <- rolling_model(artdata)
res_list <- list()
for(i in 1:11) {
modeldata <- subset(artdata, artdata[,(31+i)]<max(artdata[,(31+i)],na.rm=TRUE))
modeldata <- subset(modeldata, modeldata$counter>(i*4-4)&modeldata$counter<(i*4+17))
model <- lm(expl_vars, data=modeldata)
summary(model)
res_list[[i]] <- summary(model)$coefficients[grepl("time", rownames(summary(model)$coefficients)),1]
}
#Update
modeldata <- subset(artdata, artdata[,43]<max(artdata[,43],na.rm=TRUE))
modeldata <- subset(modeldata, modeldata$counter>42& modeldata$counter<63)
model <- lm(expl_vars, data=modeldata)
summary(model)
res_list[[12]] <- summary(model)$coefficients[grepl("time", rownames(summary(model)$coefficients)),1]
#Merge all results
rolling <- time_results
rolling$time_results <- NULL
rolling <- merge(rolling, res_list[[1]], by="row.names", all=TRUE)
rolling[,3] <- exp(rolling[,3])*100
for(i in 2:12) {
rolling <- merge(rolling, res_list[[i]], by.x = "Row.names", by.y = "row.names", all=TRUE)
rolling[,(i+2)] <- exp(rolling[i+2])*100
}
#Calculate index
rolling$ind <- rolling[,3]
rolling[2,15] <- rolling[3,15]*rolling[2,2]/rolling[3,2]  #interpolate
rolling$teller <- c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,
10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14)
for(i in 19:60) {  #chaining
j <- rolling[(i+1),16]
rolling[(i+1),15] <- rolling[i,15]*rolling[(i+1),j]/rolling[i,j]
}
colnames(rolling) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5","Index_m6",
"Index_m7","Index_m8","Index_m9","Index_m10","Index_m11","Index_m12","Index_Rolling","teller")
rolling$Date <- c("2000Q2","2000Q3","2000Q4","2001Q1","2001Q2","2001Q3","2001Q4","2002Q1","2002Q2","2002Q3","2002Q4",
"2003Q1","2003Q2","2003Q3","2003Q4","2004Q1","2004Q2","2004Q3","2004Q4","2005Q1","2005Q2","2005Q3","2005Q4",
"2006Q1","2006Q2","2006Q3","2006Q4","2007Q1","2007Q2","2007Q3","2007Q4","2008Q1","2008Q2","2008Q3","2008Q4",
"2009Q1","2009Q2","2009Q3","2009Q4","2010Q1","2010Q2","2010Q3","2010Q4","2011Q1","2011Q2","2011Q3","2011Q4",
"2012Q1","2012Q2","2012Q3","2012Q4","2013Q1","2013Q2","2013Q3","2013Q4","2014Q1","2014Q2","2014Q3","2014Q4",
"2015Q1","2015Q2")
rolling$Date <- factor(rolling$Date)
index_plot <- melt(rolling[,c(-2,-16)], id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g
index_plot <- melt(rolling[,c(1,2,15)], id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g
#It does not corresponds to the CAPI anymore - because of the ranking method
#-----------------------------
# OVERLAPPING PERIODS (1-year)
#-----------------------------
#source("overlap1y_model.R")
#overlap <- overlap1y_model(artdata)
res_list <- list()
for(i in 1:16) {
modeldata <- subset(artdata, artdata[,(43+i)]<max(artdata[,(43+i)],na.rm=TRUE))
modeldata <- subset(modeldata, modeldata$counter>(i*4-5)& modeldata$counter<(i*4+1))
model <- lm(expl_vars, data=modeldata)
res_list[[i]] <- summary(model)$coefficients[grepl("time", rownames(summary(model)$coefficients)),1]
}
#Merge all results
overlap <- time_results
overlap$time_results <- NULL
overlap <- merge(overlap, res_list[[1]], by="row.names", all=TRUE)
overlap[,3] <- exp(overlap[,3])*100
for(i in 2:16) {
overlap <- merge(overlap, res_list[[i]], by.x = "Row.names", by.y = "row.names", all=TRUE)
overlap[,(i+2)] <- exp(overlap[i+2])*100
}
#Calculate index
overlap$ind <- overlap[,3]
overlap[2,19] <- overlap[3,19]*overlap[2,2]/overlap[3,2]   #Interpolate
overlap$teller <- c(3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,
13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,18,18)
for(i in 3:60) {
j <- overlap[(i+1),20]
if(is.na(overlap[i,j])) {
overlap[(i+1),19] <- overlap[i,19]*overlap[(i+1),j]/100
} else {
overlap[(i+1),19] <- overlap[i,19]*overlap[(i+1),j]/overlap[i,j]
}
}
colnames(overlap) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5","Index_m6",
"Index_m7","Index_m8","Index_m9","Index_m10","Index_m11","Index_m12","Index_m13",
"Index_m14","Index_m15","Index_m16","Index_Adjacent","teller")
overlap$Date <- c("2000Q2","2000Q3","2000Q4","2001Q1","2001Q2","2001Q3","2001Q4","2002Q1","2002Q2","2002Q3","2002Q4",
"2003Q1","2003Q2","2003Q3","2003Q4","2004Q1","2004Q2","2004Q3","2004Q4","2005Q1","2005Q2","2005Q3","2005Q4",
"2006Q1","2006Q2","2006Q3","2006Q4","2007Q1","2007Q2","2007Q3","2007Q4","2008Q1","2008Q2","2008Q3","2008Q4",
"2009Q1","2009Q2","2009Q3","2009Q4","2010Q1","2010Q2","2010Q3","2010Q4","2011Q1","2011Q2","2011Q3","2011Q4",
"2012Q1","2012Q2","2012Q3","2012Q4","2013Q1","2013Q2","2013Q3","2013Q4","2014Q1","2014Q2","2014Q3","2014Q4",
"2015Q1","2015Q2")
overlap$Date <- factor(overlap$Date)
index_plot <- melt(overlap[,c(-2,-20)], id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g
index_plot <- rolling[,c(1,2,15)]
index_plot <- cbind(index_plot,Index_Adjacent=overlap[,19])
index_plot <- melt(index_plot, id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g
#-----------------------------
# OVERLAPPING PERIODS (2-year)
#-----------------------------
#source("overlap2y_model.R")
#overlap2 <- overlap2y_model(artdata)
res_list <- list()
for(i in 1:8) {
modeldata <- subset(artdata, artdata[,(59+i)]<max(artdata[,(59+i)],na.rm=TRUE))
modeldata <- subset(modeldata, modeldata$counter>(i*8-9)& modeldata$counter<(i*8+1))
model <- lm(expl_vars, data=modeldata)
summary(model)
res_list[[i]] <- summary(model)$coefficients[grepl("time", rownames(summary(model)$coefficients)),1]
}
#Merge all results
overlap2 <- time_results
overlap2$time_results <- NULL
overlap2 <- merge(overlap2, res_list[[1]], by="row.names", all=TRUE)
overlap2[,3] <- exp(overlap2[,3])*100
for(i in 2:8) {
overlap2 <- merge(overlap2, res_list[[i]], by.x = "Row.names", by.y = "row.names", all=TRUE)
overlap2[,(i+2)] <- exp(overlap2[i+2])*100
}
#Calculate index
overlap2$ind <- overlap2[,3]
overlap2[2,11] <- overlap2[3,11]*overlap2[2,2]/overlap2[3,2]   #Interpolate
overlap2$teller <- c(3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10)
for(i in 7:60) {
j <- overlap2[(i+1),12]
if(is.na(overlap2[i,j])) {
overlap2[(i+1),11] <- overlap2[i,11]*overlap2[(i+1),j]/100
} else {
overlap2[(i+1),11] <- overlap2[i,11]*overlap2[(i+1),j]/overlap2[i,j]
}
}
colnames(overlap2) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5",
"Index_m6","Index_m7","Index_m8","Index_Adj2","teller")
overlap2$Date <- c("2000Q2","2000Q3","2000Q4","2001Q1","2001Q2","2001Q3","2001Q4","2002Q1","2002Q2","2002Q3","2002Q4",
"2003Q1","2003Q2","2003Q3","2003Q4","2004Q1","2004Q2","2004Q3","2004Q4","2005Q1","2005Q2","2005Q3","2005Q4",
"2006Q1","2006Q2","2006Q3","2006Q4","2007Q1","2007Q2","2007Q3","2007Q4","2008Q1","2008Q2","2008Q3","2008Q4",
"2009Q1","2009Q2","2009Q3","2009Q4","2010Q1","2010Q2","2010Q3","2010Q4","2011Q1","2011Q2","2011Q3","2011Q4",
"2012Q1","2012Q2","2012Q3","2012Q4","2013Q1","2013Q2","2013Q3","2013Q4","2014Q1","2014Q2","2014Q3","2014Q4",
"2015Q1","2015Q2")
overlap2$Date <- factor(overlap2$Date)
index_plot <- melt(overlap2[,c(-2,-12)], id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g
index_plot <- rolling[,c(1,2,15)]
index_plot <- cbind(index_plot,Adjacent_1year=overlap[,19])
index_plot <- cbind(index_plot,Adjacent_2year=overlap2[,11])
index_plot <- melt(index_plot, id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g
png(file = "Adjacent Period.png", width=600,height=360)
index_plot <- rolling[,c(1,2,15)]
index_plot <- cbind(index_plot,Adjacent_1year=overlap[,19])
index_plot <- cbind(index_plot,Adjacent_2year=overlap2[,11])
index_plot <- melt(index_plot, id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g
dev.off()
png(file = "Adjacent Period.png", width=600,height=360)
index_plot <- rolling[,c(1,2,15)]
index_plot <- cbind(index_plot,Adjacent_1year=overlap[,19])
index_plot <- cbind(index_plot,Adjacent_2year=overlap2[,11])
index_plot <- melt(index_plot, id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.position="bottom") + theme(legend.title=element_blank())
g
dev.off()
rm(model)
rm(model_all)
?duplicated
install.packages("MatchIt")
View(overlap2)
View(artdata)
dups123 <- duplicated(artdata[,c("artist","title","med_code","area")])
sum(dups123)
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
modeldata <- subset(artdata, artdata$rank_total=1)
model <- lm(expl_vars, data=modeldata)
modeldata <- subset(artdata, artdata$rank_total==1)
model <- lm(expl_vars, data=modeldata)
rankings <- count(artdata, artist)
rankings$rank_total <- row_number(desc(rankings$n))
artdata <- merge(artdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
modeldata <- subset(artdata, artdata$rank_total==1)
model <- lm(expl_vars, data=modeldata)
summary(model)
View(modeldata)
cbind(modeldata, resid = resid(model), fitted = fitted(model))
?fitted
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
summary(model)
cbind(modeldata, resid = resid(model), fitted = fitted(model))
modeldata <- cbind(modeldata, resid = resid(model), fitted = fitted(model))
modeldata <- subset(artdata, artdata$rank_total==1)
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
#calculate predicted value for each painting
modeldata <- cbind(modeldata, resid=resid(model), fitted=fitted(model), error=resid/fitted)
modeldata <- cbind(modeldata, resid=resid(model), fitted=fitted(model))
mdeodata$error <- modeldata$resid/modeldata$fitted
modeldata$error <- modeldata$resid/modeldata$fitted
?predict.lm
fitted=fitted(model,omit="timedummies")
fitted=fitted(model,omit="timedummies")
fitted1=fitted(model)
?fitted
?fitted.values
fitted2=fitted(model,omit="timedummies")
newdata <- modeldata
newdata$timedummies <- 0
View(newdata)
newdata$timedummy <- 0
?predict
predict.lm(model,newdata)
newdata$timedummy <- "2000 Q1"
predict.lm(model,newdata)
modeldata <- cbind(modeldata,fitted=predict.lm(model,newdata))
help(MatchIt)
??MatchIt
