for(i in 3:62) {
j <- overlap[(i+1),20]
if(is.na(overlap[i,j])) {
overlap[(i+1),19] <- overlap[i,19]*overlap[(i+1),j]/100
} else {
overlap[(i+1),19] <- overlap[i,19]*overlap[(i+1),j]/overlap[i,j]
}
}
colnames(overlap) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5","Index_m6",
"Index_m7","Index_m8","Index_m9","Index_m10","Index_m11","Index_m12","Index_m13",
"Index_m14","Index_m15","Index_m16","Index_Adjacent1y","teller")
overlap$Date <- c("2000Q2","2000Q3","2000Q4","2001Q1","2001Q2","2001Q3","2001Q4","2002Q1","2002Q2","2002Q3","2002Q4",
"2003Q1","2003Q2","2003Q3","2003Q4","2004Q1","2004Q2","2004Q3","2004Q4","2005Q1","2005Q2","2005Q3","2005Q4",
"2006Q1","2006Q2","2006Q3","2006Q4","2007Q1","2007Q2","2007Q3","2007Q4","2008Q1","2008Q2","2008Q3","2008Q4",
"2009Q1","2009Q2","2009Q3","2009Q4","2010Q1","2010Q2","2010Q3","2010Q4","2011Q1","2011Q2","2011Q3","2011Q4",
"2012Q1","2012Q2","2012Q3","2012Q4","2013Q1","2013Q2","2013Q3","2013Q4","2014Q1","2014Q2","2014Q3","2014Q4",
"2015Q1","2015Q2","2015Q3","2015Q4")
overlap$Date <- factor(overlap$Date)
return(overlap)
}
#-----------------------------
# OVERLAPPING PERIODS (2-year)
#-----------------------------
overlap2y_model <- function(artdata, list_expl_vars=c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed", "dum_dated",
"nr_works","artist","timedummy")) {
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
res_list <- list()
for(i in 1:8) {
if("artist" %in% list_expl_vars) {
modeldata <- subset(artdata, artdata[,(60+i)]<max(artdata[,(60+i)],na.rm=TRUE))
} else modeldata <- artdata
modeldata <- subset(modeldata, modeldata$counter>(i*8-9)& modeldata$counter<(i*8+1))
model <- lm(expl_vars, data=modeldata)
res_list[[i]] <- summary(model)$coefficients[grepl("time", rownames(summary(model)$coefficients)),1]
}
#Merge all results
if("artist" %in% list_expl_vars) {
overlap2 <- time_results
} else overlap2 <- rep_results
overlap2$time_results <- NULL
overlap2 <- merge(overlap2, res_list[[1]], by="row.names", all=TRUE)
overlap2[,3] <- exp(overlap2[,3])*100
for(i in 2:8) {
overlap2 <- merge(overlap2, res_list[[i]], by.x = "Row.names", by.y = "row.names", all=TRUE)
overlap2[,(i+2)] <- exp(overlap2[i+2])*100
}
#Calculate index
overlap2$ind <- overlap2[,3]
overlap2[2,11] <- overlap2[3,11]*overlap2[2,2]/overlap2[3,2]   #Interpolate
overlap2$teller <- c(3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10)
for(i in 7:62) {
j <- overlap2[(i+1),12]
if(is.na(overlap2[i,j])) {
overlap2[(i+1),11] <- overlap2[i,11]*overlap2[(i+1),j]/100
} else {
overlap2[(i+1),11] <- overlap2[i,11]*overlap2[(i+1),j]/overlap2[i,j]
}
}
colnames(overlap2) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5",
"Index_m6","Index_m7","Index_m8","Index_Adj2y","teller")
overlap2$Date <- c("2000Q2","2000Q3","2000Q4","2001Q1","2001Q2","2001Q3","2001Q4","2002Q1","2002Q2","2002Q3","2002Q4",
"2003Q1","2003Q2","2003Q3","2003Q4","2004Q1","2004Q2","2004Q3","2004Q4","2005Q1","2005Q2","2005Q3","2005Q4",
"2006Q1","2006Q2","2006Q3","2006Q4","2007Q1","2007Q2","2007Q3","2007Q4","2008Q1","2008Q2","2008Q3","2008Q4",
"2009Q1","2009Q2","2009Q3","2009Q4","2010Q1","2010Q2","2010Q3","2010Q4","2011Q1","2011Q2","2011Q3","2011Q4",
"2012Q1","2012Q2","2012Q3","2012Q4","2013Q1","2013Q2","2013Q3","2013Q4","2014Q1","2014Q2","2014Q3","2014Q4",
"2015Q1","2015Q2","2015Q3","2015Q4")
overlap2$Date <- factor(overlap2$Date)
return(overlap2)
}
#----------------------
#ROLLING 5-YEAR WINDOWS
#----------------------
rolling_model <- function(artdata, list_expl_vars=c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed", "dum_dated",
"nr_works","artist","timedummy")) {
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
res_list <- list()
for(i in 1:12) {
if("artist" %in% list_expl_vars) {
modeldata <- subset(artdata, artdata[,(32+i)]<max(artdata[,(32+i)],na.rm=TRUE))
} else modeldata <- artdata
modeldata <- subset(modeldata, modeldata$counter>(i*4-4)&modeldata$counter<(i*4+17))
model <- lm(expl_vars, data=modeldata)
summary(model)
res_list[[i]] <- summary(model)$coefficients[grepl("time", rownames(summary(model)$coefficients)),1]
}
#Update
#if("artist" %in% list_expl_vars) {
#    modeldata <- subset(artdata, artdata[,44]<max(artdata[,44],na.rm=TRUE))
#} else modeldata <- artdata
#modeldata <- subset(modeldata, modeldata$counter>42& modeldata$counter<63)
#model <- lm(expl_vars, data=modeldata)
#summary(model)
#res_list[[12]] <- summary(model)$coefficients[grepl("time", rownames(summary(model)$coefficients)),1]
#Merge all results
if("artist" %in% list_expl_vars) {
rolling <- time_results
} else rolling <- rep_results
rolling$time_results <- NULL
rolling <- merge(rolling, res_list[[1]], by="row.names", all=TRUE)
rolling[,3] <- exp(rolling[,3])*100
for(i in 2:12) {
rolling <- merge(rolling, res_list[[i]], by.x = "Row.names", by.y = "row.names", all=TRUE)
rolling[,(i+2)] <- exp(rolling[i+2])*100
}
#Calculate index
rolling$ind <- rolling[,3]
rolling[2,15] <- rolling[3,15]*rolling[2,2]/rolling[3,2]  #interpolate
rolling$teller <- c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,
10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14)
for(i in 19:62) {  #chaining
j <- rolling[(i+1),16]
rolling[(i+1),15] <- rolling[i,15]*rolling[(i+1),j]/rolling[i,j]
}
colnames(rolling) <- c("Date","Index_Full","Index_m1","Index_m2","Index_m3","Index_m4","Index_m5","Index_m6",
"Index_m7","Index_m8","Index_m9","Index_m10","Index_m11","Index_m12","Index_Rolling","teller")
rolling$Date <- c("2000Q2","2000Q3","2000Q4","2001Q1","2001Q2","2001Q3","2001Q4","2002Q1","2002Q2","2002Q3","2002Q4",
"2003Q1","2003Q2","2003Q3","2003Q4","2004Q1","2004Q2","2004Q3","2004Q4","2005Q1","2005Q2","2005Q3","2005Q4",
"2006Q1","2006Q2","2006Q3","2006Q4","2007Q1","2007Q2","2007Q3","2007Q4","2008Q1","2008Q2","2008Q3","2008Q4",
"2009Q1","2009Q2","2009Q3","2009Q4","2010Q1","2010Q2","2010Q3","2010Q4","2011Q1","2011Q2","2011Q3","2011Q4",
"2012Q1","2012Q2","2012Q3","2012Q4","2013Q1","2013Q2","2013Q3","2013Q4","2014Q1","2014Q2","2014Q3","2014Q4",
"2015Q1","2015Q2","2015Q3","2015Q4")
rolling$Date <- factor(rolling$Date)
return(rolling)
}
#=======================================================================================================================
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","lnrep","timedummy")
rep_results <- full_model(artdata,list_expl_vars)
suppressMessages(rep_overlap1 <- overlap1y_model(artdata,list_expl_vars))
suppressMessages(rep_overlap2 <- overlap2y_model(artdata,list_expl_vars))
suppressMessages(rep_rolling <- rolling_model(artdata,list_expl_vars))
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","lnrep","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
modeldata <- artdata
model_all <- lm(expl_vars, data=modeldata)
stargazer(model_all, title = "Hedonic Regression results", omit=c("timedummy"), omit.labels = "Quarterly dummies", header=FALSE, single.row = TRUE, type = "latex")
View(artdata)
write.csv(artdata, file="artdata_lnrep.csv")
View(rep_results)
View(rep_overlap1)
View(rep_rolling)
hedonic_indices <- rep_overlap1[,c(1,2)]
colnames(hedonic_indices) <- c("Date","Hedonic_Full")
hedonic_indices <- cbind(hedonic_indices,Adjacent_1y=rep_overlap1[,19])
hedonic_indices <- cbind(hedonic_indices,Adjacent_2y=rep_overlap2[,11])
hedonic_indices <- cbind(hedonic_indices,Rolling=rep_rolling[,15])
#png(file = "Reputation.png", width=600,height=360)
index_plot <- melt(hedonic_indices, id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.position="bottom") + theme(legend.title=element_blank())
g
index_plot <- melt(rep_overlap2[,c(-2,-12)], id="Date")  # convert to long format
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.title=element_blank())
g
View(hedonic_indices)
resettest(model,power=2:3,type="fitted")
library(lmtest)
resettest(model,power=2:3,type="fitted")
resettest(model,power=2:3,type="regressor")
resettest(model_100,power=2:3,type="fitted")
resettest(model_100,power=2:3,type="regressor")
resettest(model_all,power=2:3,type="fitted")
resettest(model_all,power=2:3,type="regressor")
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed", "dum_dated",
"nr_works","lnrep","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
quant <- rq(expl_vars, tau=c(0.10,0.25,0.5,0.75,0.90), data=artdata)
quant_results <- coef(quant)[grepl("time", rownames(coef(quant))),1:5]
quant_results <- as.data.frame(quant_results)
quant_results <- exp(quant_results)*100
index_plot <- rolling[,c(1,2)]
index_plot <- cbind(index_plot,quant_results)
index_plot <- index_plot[,-2]
index_plot <- melt(index_plot, id="Date")  # convert to long format
#png(file = "Quantile.png", width=600,height=360)
g <- ggplot(data=index_plot,aes(x=Date, y=value, group=variable, colour=variable))
g <- g + geom_point(size = 3)
g <- g + geom_line()
g <- g + ylab("Index")
g <- g + xlab("")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + theme(legend.position="bottom") + theme(legend.title=element_blank())
g
allDup <- function(value) {
duplicated(value) | duplicated(value, fromLast = TRUE)
}
rsartdata <- artdata[allDup(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]),]
rsartdata <- transform(rsartdata, id = as.numeric(interaction(artist,factor(title),med_code,factor(area),factor(dum_signed),
factor(dum_dated), drop=TRUE)))
repdata <- repsaledata(rsartdata$lnprice,rsartdata$counter,rsartdata$id)
repeatsales <- repsale(repdata$price0,repdata$time0,repdata$price1,repdata$time1,mergefirst=2,
graph=FALSE)
repeatsales_index <- exp(as.data.frame(repeatsales$pindex))*100
View(repeatsales_index)
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")])
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
View(rsartdata)
unique(rsartdata[,c("artist","title","med_code","area","dum_signed","dum_dated")])
sum(unique(rsartdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
write.csv(rsartdata, "rsartdata.csv")
sum(duplicated(artdata[,c("artist","title","med_code","area","dum_signed","dum_dated")]))
View(repeatsales_index)
threshold <- 0.0005
list_expl_vars <- c("lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy")
expl_vars <- as.formula(paste("lnprice~",paste(list_expl_vars,collapse="+")))
teller <-0
repdata <- data.frame()
rartdata <- subset(artdata,artdata$rank_all<max(artdata$rank_all,na.rm=TRUE))  #exclude artists with one sale
keep <- c("lnprice","artist","title","lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy","counter")
rartdata <- rartdata[,names(rartdata) %in% keep]
rartdata <- rartdata[complete.cases(rartdata),]
## Rank total again for new sample
rankings <- count(rartdata, artist)
View(rankings)
rankings$rank_total <- row_number(desc(rankings$n))
rartdata <- merge(rartdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
View(rartdata)
k <- 1
modeldata <- subset(rartdata, rartdata$rank_total==k)
modeldata$med_code <- factor(modeldata$med_code)
modeldata$ah_code <- factor(modeldata$ah_code)
modeldata$dum_signed <- factor(modeldata$dum_signed)
modeldata$dum_dated <- factor(modeldata$dum_dated)
modeldata$timedummy <- factor(modeldata$timedummy)
View(modeldata)
View(rankings)
k <-29
modeldata <- subset(rartdata, rartdata$rank_total==k)
modeldata$med_code <- factor(modeldata$med_code)
modeldata$ah_code <- factor(modeldata$ah_code)
modeldata$dum_signed <- factor(modeldata$dum_signed)
modeldata$dum_dated <- factor(modeldata$dum_dated)
modeldata$timedummy <- factor(modeldata$timedummy)
View(modeldata)
levels(modeldata$med_code)
length(levels(modeldata$med_code))
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
newdata <- modeldata
newdata$timedummy <- newdata$timedummy[1]  #turn time dummy off by making them all the same
modeldata <- cbind(modeldata,fitted=predict.lm(model,newdata=newdata))  #model predicted value
View(modeldata)
modeldata$id <- 0
i<-1
teller <- teller + 1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
exp(7.267168)
exp(7.348145)
exp(7.292830)
for(i in 1:nrow(modeldata)) {  #give items below threshold the same id
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
}
}
}
threshold<-"nearest"
modeldata$id <- 0
for(i in 1:nrow(modeldata)) {  #give items below threshold the same id
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
}
}
}
teller <-0
modeldata$id <- 0
for(i in 1:nrow(modeldata)) {  #give items below threshold the same id
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
}
}
}
repeatsales_index$Date <- c("2000Q4","2001Q1","2001Q2","2001Q3","2001Q4","2002Q1","2002Q2","2002Q4",
"2003Q1","2003Q2","2003Q4","2004Q1","2004Q2","2004Q4","2005Q1","2005Q2","2005Q3","2005Q4",
"2006Q1","2006Q2","2006Q3","2006Q4","2007Q2","2007Q3","2007Q4","2008Q1","2008Q2","2008Q3","2008Q4",
"2009Q1","2009Q2","2009Q3","2009Q4","2010Q1","2010Q2","2010Q3","2010Q4","2011Q1","2011Q2","2011Q3","2011Q4",
"2012Q1","2012Q2","2012Q3","2012Q4","2013Q1","2013Q2","2013Q3","2013Q4","2014Q1","2014Q2","2014Q3","2014Q4",
"2015Q1","2015Q2","2015Q3","2015Q4")
View(repeatsales_index)
View(repdata)
repdata <- rbind(repdata,modeldata[,"id"]!=0)
View(repdata)
teller <-0
repdata <- data.frame()
i<-1
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
}
modeldata$id <- 0
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
}
modeldata$id <- 0
)
modeldata$id <- 0
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
}
modeldata[,"id"]!=0
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)]
threshold=="nearest"
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
modeldata[,"id"]!=0
threshold<-0.001
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)]
threshold<-0.1
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)]
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
modeldata[,"id"]!=0
repdata <- rbind(repdata,modeldata[,"id"]!=0)
repdata <- data.frame()
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
repdata <- data.frame()
modeldata$id <- 0
for(i in 1:nrow(modeldata)) {  #give items below threshold the same id
teller <- teller + 1
if(modeldata$id[i]==0) {
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
}
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
}
}
repdata <- data.frame()
i <- 1
teller <- 1
threshold <- 0.001
modeldata$id <- 0
teller <- teller + 1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"med_code"]==medium)] <- teller
}
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
teller <- 0
i <- 1
modeldata$id <- 0
teller <- teller + 1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"med_code"]==medium)] <- teller
}
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
i <-2
modeldata$id <- 0
teller <- teller + 1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"med_code"]==medium)] <- teller
}
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
repdata <- data.frame()
teller <-0
for(i in 1:nrow(modeldata)) {  #give items below threshold the same id
modeldata$id <- 0
teller <- teller + 1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){
modeldata$id[(modeldata$distance==min(modeldata$distance,na.rm=TRUE) & modeldata[,"id"]==0 & modeldata[,"med_code"]==medium)] <- teller
} else {
modeldata$id[(modeldata$distance<threshold & modeldata[,"med_code"]==medium)] <- teller
}
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
}
fullrep <- cbind(repsaledata(repdata$lnprice,repdata$counter,repdata$id),
repsaledata(repdata$lnarea,repdata$counter,repdata$id)[,4:5],
repsaledata(repdata$med_code,repdata$counter,repdata$id)[,4:5],
repsaledata(repdata$ah_code,repdata$counter,repdata$id)[,4:5],
repsaledata(repdata$lnsculpt_area,repdata$counter,repdata$id)[,4:5],
repsaledata(repdata$dum_signed,repdata$counter,repdata$id)[,4:5],
repsaledata(repdata$dum_dated,repdata$counter,repdata$id)[,4:5],
repsaledata(repdata$nr_works,repdata$counter,repdata$id)[,4:5])
View(fullrep)
modeldata[,"med_code"]==medium
modeldata$distance[modeldata[,"med_code"]==medium,]
modeldata$distance[modeldata[,"med_code"]==medium]
min(modeldata$distance[modeldata[,"med_code"]==medium],na.rm=TRUE)
modeldata$distance[modeldata[,"id"]==0 & modeldata[,"med_code"]==medium]
min(modeldata$distance[modeldata[,"id"]==0 & modeldata[,"med_code"]==medium],na.rm=TRUE)
modeldata$id[(modeldata$distance==min(modeldata$distance[modeldata[,"id"]==0 & modeldata[,"med_code"]==medium],na.rm=TRUE))]
modeldata$id <- 0
teller <-0
i<-1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
modeldata$id[(modeldata$distance==min(modeldata$distance[modeldata[,"id"]==0 & modeldata[,"med_code"]==medium],na.rm=TRUE))] <- teller
teller <- teller + 1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
modeldata$id[(modeldata$distance==min(modeldata$distance[modeldata[,"id"]==0 & modeldata[,"med_code"]==medium],na.rm=TRUE))] <- teller
repdata <- data.frame()
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
teller <-0
repdata <- data.frame()
rartdata <- subset(artdata,artdata$rank_all<max(artdata$rank_all,na.rm=TRUE))  #exclude artists with one sale
keep <- c("lnprice","artist","title","lnarea","ah_code","med_code","lnsculpt_area","dum_signed","dum_dated",
"nr_works","timedummy","counter")
rartdata <- rartdata[,names(rartdata) %in% keep]
rartdata <- rartdata[complete.cases(rartdata),]
#Rank total again for new sample
rankings <- count(rartdata, artist)
rankings$rank_total <- row_number(desc(rankings$n))
rartdata <- merge(rartdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
for(k in 1:max(rartdata$rank_total)) {
modeldata <- subset(rartdata, rartdata$rank_total==k)
modeldata$med_code <- factor(modeldata$med_code)
modeldata$ah_code <- factor(modeldata$ah_code)
modeldata$dum_signed <- factor(modeldata$dum_signed)
modeldata$dum_dated <- factor(modeldata$dum_dated)
modeldata$timedummy <- factor(modeldata$timedummy)
#if there is only one factor level => make it a zero
if(length(levels(modeldata$med_code))==1)   { modeldata$med_code <- as.numeric(0) }
if(length(levels(modeldata$ah_code))==1)    { modeldata$ah_code <- as.numeric(0) }
if(length(levels(modeldata$dum_signed))==1) { modeldata$dum_signed <- as.numeric(0) }
if(length(levels(modeldata$dum_dated))==1)  { modeldata$dum_dated <- as.numeric(0)   }
if(length(levels(modeldata$timedummy))!=1) {   #if there were sales in more than one period
model <- lm(expl_vars, data=modeldata, na.action = na.exclude)
newdata <- modeldata
newdata$timedummy <- newdata$timedummy[1]  #turn time dummy off by making them all the same
modeldata <- cbind(modeldata,fitted=predict.lm(model,newdata=newdata))  #add predicted value
for(i in 1:nrow(modeldata)) {  #give items below threshold the same id
modeldata$id <- 0
teller <- teller + 1
modeldata$id[i] <- teller
medium <- modeldata$med_code[i]
modeldata$distance <- abs(modeldata$fitted[i]-modeldata$fitted)  #distance metric
if(threshold=="nearest"){  #nearest match if same medium
modeldata$id[(modeldata$distance==min(modeldata$distance[modeldata[,"id"]==0 & modeldata[,"med_code"]==medium],na.rm=TRUE))] <- teller
} else {                   #if same medium and distance smaller than threshold
modeldata$id[(modeldata$distance<threshold & modeldata[,"med_code"]==medium)] <- teller
}
repdata <- rbind(repdata,modeldata[modeldata[,"id"]!=0,])
}
}
}
View(repdata)
