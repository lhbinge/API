##Estimating the model
varsimest<-VAR(vardat,p=1,type="none",season=NULL,exogen=NULL)
varsimest
roots <- roots(varsimest, modulus=TRUE)
##Impulse response analysis1
irf.y1 <- irf(varsimest, impulse = "y1", response = "y2", n.ahead = 10,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Impulse response analysis1
irf.y1 <- irf(varsimest, impulse = "y1", n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
irf.y1 <- irf(varsimest, impulse = "y1", n.ahead = 20,
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
irf.y1 <- irf(varsimest, impulse = "y1", n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Impulse response analysis1
irf.y1 <- irf(varsimest, impulse = "y1", n.ahead = 20,
ortho = FALSE, cumulative = TRUE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Impulse response analysis1
irf.y1 <- irf(varsimest, impulse = "y2", n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
?irf
##Impulse response analysis1
irf.y1 <- irf(varsimest, impulse = "y2", n.ahead = 20,
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
B[2, 1] <- 0.8
##Generating the VAR(2) model
var2<-ARMA(A=Apoly,B=B)
##Simulating 500 observations
varsim<-simulate(var2,sampleT=500,noise=list(w=matrix(rnorm(1000),
nrow=500,ncol=2)),rng=list(seed=c(123456)))
##Obtaining the generated series
vardat<-matrix(varsim$output,nrow=500,ncol=2)
colnames(vardat)<-c("y1","y2")
##Plotting the series
plot.ts(vardat,main="",xlab="")
##Estimating the model
varsimest<-VAR(vardat,p=1,type="none",season=NULL,exogen=NULL)
varsimest
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
B[1, 2] <- 0.8
View(B)
##Generating the VAR(2) model
var2<-ARMA(A=Apoly,B=B)
##Simulating 500 observations
varsim<-simulate(var2,sampleT=500,noise=list(w=matrix(rnorm(1000),
nrow=500,ncol=2)),rng=list(seed=c(123456)))
##Obtaining the generated series
vardat<-matrix(varsim$output,nrow=500,ncol=2)
colnames(vardat)<-c("y1","y2")
##Plotting the series
plot.ts(vardat,main="",xlab="")
##Estimating the model
varsimest<-VAR(vardat,p=1,type="none",season=NULL,exogen=NULL)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
B<-diag(2)
B[1, 2] <- 0.8
##Generating the VAR(2) model
var2<-ARMA(A=Apoly,B=B)
##Simulating 500 observations
varsim<-simulate(var2,sampleT=500,noise=list(w=matrix(rnorm(1000),
nrow=500,ncol=2)),rng=list(seed=c(123456)))
##Obtaining the generated series
vardat<-matrix(varsim$output,nrow=500,ncol=2)
colnames(vardat)<-c("y1","y2")
##Plotting the series
plot.ts(vardat,main="",xlab="")
##Estimating the model
varsimest<-VAR(vardat,p=1,type="none",season=NULL,exogen=NULL)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
View(B)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
varsimest<-VAR(vardat[,c(2,1)],p=1,type="none",season=NULL,exogen=NULL)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20, impulse = "y2", response = "y1",
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
irf.y1 <- irf(varsimest, n.ahead = 20, impulse = "y2", response = "y2",
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Estimating the model
varsimest<-VAR(vardat,p=1,type="none",season=NULL,exogen=NULL)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20, impulse = "y2", response = "y2",
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20, impulse = "y2", response = "y1",
ortho = TRUE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
?irf
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
##Estimating the model
varsimest<-VAR(vardat[,c(2,1)],p=1,type="none",season=NULL,exogen=NULL)
##Impulse response analysis1
irf.y1 <- irf(varsimest, n.ahead = 20,
ortho = FALSE, cumulative = FALSE, boot = FALSE, seed = 12345)
plot(irf.y1)
set.seed(189)
n = 2000
# sale dates range from 0-10
# drawn uniformly from all possible time0, time1 combinations with time0<time1
tmat <- expand.grid(seq(0,10), seq(0,10))
tmat <- tmat[tmat[,1]<tmat[,2], ]
tobs <- sample(seq(1:nrow(tmat)),n,replace=TRUE)
time0 <- tmat[tobs,1]
time1 <- tmat[tobs,2]
timesale <- time1-time0
table(timesale)
View(tmat)
# constant variance; index ranges from 0 at time 0 to 1 at time 10
y0 <- time0/10 + rnorm(n,0,.2)
y1 <- time1/10 + rnorm(n,0,.2)
fit <- repsale(price0=y0, price1=y1, time0=time0, time1=time1)
library(McSpatial)
fit <- repsale(price0=y0, price1=y1, time0=time0, time1=time1)
# variance rises with timesale
# var(u0) = .2^2; var(u1) = (.2 + timesale/10)^2
# var(u1-u0) = var(u0) + var(u1) = 2*(.2^2) + .4*timesale/10 + (timesale^2)/100
y0 <- time0/10 + rnorm(n,0,.2)
y1 <- time1/10 + rnorm(n,0,.2+timesale/10)
par(ask=TRUE)
fit <- repsale(price0=y0, price1=y1, time0=time0, time1=time1)
fit <- repsale(price0=y0, price1=y1, time0=time0, time1=time1, stage3="abs")
timesale2 <- timesale^2
fit <- repsale(price0=y0, price1=y1, time0=time0, time1=time1, stage3="square",
stage3_xlist=~timesale+timesale2)
library(tempdisagg)
install.packages("tempdisagg")
library(tempdisagg)
?td
demo(tempdisagg)
##===============================================================================================##
## -------------------------------- COMMODITY INDEX ---------------------------------------------##
##===============================================================================================##
##=====================##
## READING IN THE DATA ##
##=====================##
library(zoo)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(stargazer)
library(micEcon)
library(quantreg)
library(McSpatial)
library(quantmod)
library(xtable)
library(scales)
library(tseries)
library(urca)
library(lmtest)
library(grid)
#setwd("C:/Users/Laurie/OneDrive/Documents/BING/METRICS/PhD Proposal Readings/Art Price Index")
setwd("C:\\Users\\Laurie\\OneDrive\\Documents\\BING\\PhD Proposal Readings\\Commodity Cycles\\R Commodities")
comdata <- read.csv("Commodities.csv", header=TRUE, sep=",",na.strings = "", skipNul = TRUE)
setwd("C:\\Users\\Laurie\\OneDrive\\Documents\\BING\\PhD Proposal Readings\\Commodity Cycles\\R Commodities")
##===============================================================================================##
## -------------------------------- COMMODITY INDEX ---------------------------------------------##
##===============================================================================================##
##=====================##
## READING IN THE DATA ##
##=====================##
library(zoo)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
library(stargazer)
library(micEcon)
library(quantreg)
library(McSpatial)
library(quantmod)
library(xtable)
library(scales)
library(tseries)
library(urca)
library(lmtest)
library(grid)
#setwd("C:/Users/Laurie/OneDrive/Documents/BING/METRICS/PhD Proposal Readings/Art Price Index")
setwd("C:\\Users\\Laurie\\OneDrive\\Documents\\BING\\PhD Proposal Readings\\Commodity Cycles\\R Commodities")
comdata <- read.csv("Commodities.csv", header=TRUE, sep=",",na.strings = "", skipNul = TRUE)
#comdata$date <- as.Date(comdata$date, "%Y/%m/%d")
comdata$datum <- paste(comdata$datum, comdata$Year)
comdata$date <- as.Date(as.yearmon(as.character(comdata$datum),"%B %Y"))
comdata$datum <- factor(as.yearmon(as.character(comdata$datum),"%B %Y"))
coms <- aggregate(comdata$wheat, by=list(comdata$date), FUN = function(x) sum(!is.na(x)))
for(i in colnames(comdata)[7:29]) {
coms1 <- aggregate(comdata[,i], by=list(comdata$date), FUN = function(x) sum(!is.na(x)))
coms <- merge(coms, coms1, by="Group.1",all.x=TRUE)
}
colnames(coms) <- c("Date",colnames(comdata)[6:29])
complot <- melt(coms, id="Date")
g <- ggplot(complot, aes(x=Date,value,colour=variable,fill=variable))
g <- g + geom_bar(stat="identity")
g <- g + theme(legend.title=element_blank())
g <- g + ylab("Total obs")
g <- g + theme(legend.key.size = unit(0.5,"cm"))
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
coms <- aggregate(comdata$wheat, by=list(comdata$date), FUN = function(x) sum(!is.na(x)))
for(i in colnames(comdata)[7:29]) {
coms1 <- aggregate(comdata[,i], by=list(comdata$date), FUN = function(x) sum(!is.na(x)))
coms <- merge(coms, coms1, by="Group.1",all.x=TRUE)
}
colnames(coms) <- c("Date",colnames(comdata)[6:29])
complot <- aggregate(comdata$town, by=list(comdata$date, comdata$wheat), FUN = function(x) sum(!is.na(x)))
com.plot <- function(commodity="wheat") {
complot <- aggregate(comdata[,commodity], by=list(comdata$date, comdata$town), FUN = function(x) sum(!is.na(x)))
g <- ggplot(complot, aes(x=Group.1, y=x,fill=Group.2))
g <- g + geom_bar(stat="identity")
g <- g + theme(legend.title=element_blank())
g <- g + theme(legend.key.size = unit(0.4,"cm"))
g <- g + ylab(commodity)
g <- g + xlab("Date")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g
}
com.plot("wheat")
com.plot("mealies")
com.plot("eggs")
com.plot("s.horses")
install.packages("rprojroot")
getOption(repos)
getOption("repos")
?BBQ
library(BCDating)
?BBQ
data("Iran.non.Oil.GDP.Cycle")
dat <- BBQ(Iran.non.Oil.GDP.Cycle, name="Dating Business Cycles of Iran")
show(dat)
summary(dat)
plot(dat)
data(MBRI.Iran.Dating)
plot(dat,MBRI.Iran.Dating)
MBRI.Iran.Dating
dat
str(dat)
str(MBRI.Iran.Dating)
?geom_rect
library(ggplot2)
?geom_rect
?princomp
paste0(paste0('& \\multicolumn{2}{c}{  No Drift  } & \\multicolumn{2}{c}{ Drift }',collapse=''), '\\\\')
index_plot <- pr_seg
?legend
?print
install.packages("devtools")
library(devtools)
install_github("andyphilips/pss")
library(pss)
#Example
library(MASS)
library(car)
data("airquality")
d.wind <- c(NA,diff(airquality$Wind))
d.temp <- c(NA,diff(airquality$Temp))
l.wind <- lag(airquality$Wind, k = 1)
l.temp <- lag(airquality$Temp, k = 1)
cbind(d.wind, d.temp, l.wind, l.temp)
#Run an error-correction model with the following regressors:
#the first difference of temp, and the lagged-levels of temp and wind
#(white-noise residuals assumed):
res <- lm(d.temp ~ l.temp + l.wind + d.wind)
summary(res) # t-stat on l.temp = 4.438
linearHypothesis(res, c("l.temp = 0", "l.wind = 0")) # 9.8789
res2 <- lm(d.temp ~ l.temp + l.wind + d.wind - 1)
summary(res2) # t-stat on l.temp =  1.445
linearHypothesis(res2, c("l.temp=0","l.wind = 0")) # 1.045
bounds2 <- pssbounds(case = 1, tstat = 1.445, fstat = 1.045, obs = 153, k = 1)
bounds <- pssbounds(obs = 153, case = 3, k = 1, fstat = 9.879, tstat = 4.438)
suppressMessages(library(zoo))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(dplyr))
suppressMessages(library(reshape2))
suppressMessages(library(stargazer))
suppressMessages(library(micEcon))
suppressMessages(library(quantreg))
suppressMessages(library(McSpatial))
suppressMessages(library(quantmod))
suppressMessages(library(xtable))
suppressMessages(library(scales))
suppressMessages(library(tseries))
suppressMessages(library(urca))
suppressMessages(library(lmtest))
suppressMessages(library(grid))
suppressMessages(library(tempdisagg))
suppressMessages(library(gridExtra))
suppressMessages(library(vars))
?VARselect
suppressMessages(library(zoo))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(dplyr))
suppressMessages(library(reshape2))
suppressMessages(library(stargazer))
suppressMessages(library(micEcon))
suppressMessages(library(quantreg))
suppressMessages(library(McSpatial))
suppressMessages(library(quantmod))
suppressMessages(library(xtable))
suppressMessages(library(scales))
suppressMessages(library(tseries))
suppressMessages(library(urca))
suppressMessages(library(lmtest))
suppressMessages(library(grid))
suppressMessages(library(tempdisagg))
suppressMessages(library(gridExtra))
suppressMessages(library(vars))
?ca.jo
?VARselect
install.packages("pco")
library(pco)
?pedroni99
suppressMessages(library(zoo))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(dplyr))
suppressMessages(library(reshape2))
suppressMessages(library(stargazer))
suppressMessages(library(micEcon))
suppressMessages(library(quantreg))
suppressMessages(library(McSpatial))
suppressMessages(library(quantmod))
suppressMessages(library(xtable))
suppressMessages(library(scales))
suppressMessages(library(tseries))
suppressMessages(library(urca))
suppressMessages(library(mFilter))
setwd("C:\\Users\\Laurie\\OneDrive\\Documents\\BING\\Art Price Index\\R Code")
datums <- read.csv("datums.csv", header=TRUE, sep=",",na.strings = "", skipNul = TRUE)
datums$Datum <- as.Date(datums$Datum, format = "%Y/%m/%d")
assets <- read.csv("Assets.csv", header=TRUE, na.strings = "", skipNul = TRUE)
artdata <- read.csv("Auction database.csv", header=TRUE, sep=",",na.strings = "", skipNul = TRUE,
colClasses=c("character","numeric","numeric","numeric","numeric","factor","factor","factor","character",
"factor","factor","factor","character","factor","factor","factor","numeric","character",
"numeric","numeric","numeric","numeric","numeric","numeric"))
##===================##
## CLEANING THE DATA ##
##===================##
artdata$date <- as.Date(artdata$date)
artdata$med_code <- factor(artdata$med_code, labels=c("Drawing", "Watercolour", "Oil", "Acrylic", "Print/Woodcut",
"Mixed Media","Sculpture","Photography", "Other"))
artdata$ah_code <- factor(artdata$ah_code, labels=c("5th Avenue","Ashbeys","Bernardi","Bonhams","Russell Kaplan",
"Stephan Welz","Strauss","Christies"))
artdata$timedummy <- factor(as.yearqtr(artdata$date, "%Y-%m-%d"))
artdata$lnprice <- log(artdata$price)
artdata$lnarea <- log(artdata$area)
artdata$lnarea2 <- artdata$lnarea*artdata$lnarea
#inteaction term: sculptures often only reported with 1 dimension (height)
artdata$lnsculpt_area <- ifelse(artdata$med_code=="Sculpture", artdata$lnarea, 0)
artdata$counter <- as.numeric(artdata$timedummy)
#artdata$timedummy2 <- factor(as.yearmon(artdata$date, "%Y/%m/%d"))
#artdata$counter2 <- as.numeric(artdata$timedummy2)
##----------------------
##Rank Artists by Volume
##----------------------
#Rank by Total Volume (all)
rankings <- count(artdata, artist)
#rankings <- rankings[order(rankings$n, decreasing = TRUE),]
rankings$rank_all <- dense_rank(desc(rankings$n))    #rank by density, with no gaps (ties = equal)
rankings$rank_total <- row_number(desc(rankings$n))  #equivalent to rank(ties.method = "first")
rankings$n <- NULL
#artdata <- merge(artdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
#-------------------------------
artplot <- aggregate(artdata$hammer_price, by=list(artdata$year,artdata$ah_code), FUN = length)
g <- ggplot(artplot, aes(x=Group.1, y=x,fill=Group.2))
g <- g + geom_bar(stat="identity")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + scale_fill_discrete(name="Auction House")
g <- g + scale_y_continuous(labels=comma)
g <- g + ylab("Total Number of Sales (Auction Lots)")
g <- g + xlab("Date")
g <- g + guides(fill = guide_legend(reverse = TRUE))
g
View(artdata)
artplot <- aggregate(artdata$hammer_price, by=list(artdata$timedummy,artdata$ah_code), FUN = length)
g <- ggplot(artplot, aes(x=Group.1, y=x,fill=Group.2))
g <- g + geom_bar(stat="identity")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + scale_fill_discrete(name="Auction House")
g <- g + scale_y_continuous(labels=comma)
g <- g + ylab("Total Number of Sales (Auction Lots)")
g <- g + xlab("Date")
g <- g + guides(fill = guide_legend(reverse = TRUE))
g
artplot <- aggregate(artdata$hammer_price, by=list(artdata$timedummy,artdata$ah_code), FUN = length)
View(artplot)
artplot <- aggregate(artdata$hammer_price, by=list(artdata$timedummy,artdata$ah_code), FUN = length)
artplot$Group.1 <- as.Date(as.yearqtr(artplot$Group.1, format = "%Y Q%q"))
g <- ggplot(artplot, aes(x=Group.1, y=x,fill=Group.2))
g <- g + geom_bar(stat="identity")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + scale_fill_discrete(name="Auction House")
g <- g + scale_y_continuous(labels=comma)
g <- g + ylab("Total Number of Sales (Auction Lots)")
g <- g + xlab("Date")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g <- g + guides(fill = guide_legend(reverse = TRUE))
g
##===============================================================================================##
## -------------------------------- ART PRICE INDEX ---------------------------------------------##
##===============================================================================================##
##=====================##
## READING IN THE DATA ##
##=====================##
suppressMessages(library(zoo))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(dplyr))
suppressMessages(library(reshape2))
suppressMessages(library(stargazer))
suppressMessages(library(micEcon))
suppressMessages(library(quantreg))
suppressMessages(library(McSpatial))
suppressMessages(library(quantmod))
suppressMessages(library(xtable))
suppressMessages(library(scales))
suppressMessages(library(tseries))
suppressMessages(library(urca))
suppressMessages(library(mFilter))
setwd("C:\\Users\\Laurie\\OneDrive\\Documents\\BING\\Art Price Index\\R Code")
datums <- read.csv("datums.csv", header=TRUE, sep=",",na.strings = "", skipNul = TRUE)
datums$Datum <- as.Date(datums$Datum, format = "%Y/%m/%d")
assets <- read.csv("Assets.csv", header=TRUE, na.strings = "", skipNul = TRUE)
artdata <- read.csv("Auction database.csv", header=TRUE, sep=",",na.strings = "", skipNul = TRUE,
colClasses=c("character","numeric","numeric","numeric","numeric","factor","factor","factor","character",
"factor","factor","factor","character","factor","factor","factor","numeric","character",
"numeric","numeric","numeric","numeric","numeric","numeric"))
##===================##
## CLEANING THE DATA ##
##===================##
artdata$date <- as.Date(artdata$date)
artdata$med_code <- factor(artdata$med_code, labels=c("Drawing", "Watercolour", "Oil", "Acrylic", "Print/Woodcut",
"Mixed Media","Sculpture","Photography", "Other"))
artdata$ah_code <- factor(artdata$ah_code, labels=c("5th Avenue","Ashbeys","Bernardi","Bonhams","Russell Kaplan",
"Stephan Welz","Strauss","Christies"))
artdata$timedummy <- factor(as.yearqtr(artdata$date, "%Y-%m-%d"))
artdata$lnprice <- log(artdata$price)
artdata$lnarea <- log(artdata$area)
artdata$lnarea2 <- artdata$lnarea*artdata$lnarea
#inteaction term: sculptures often only reported with 1 dimension (height)
artdata$lnsculpt_area <- ifelse(artdata$med_code=="Sculpture", artdata$lnarea, 0)
artdata$counter <- as.numeric(artdata$timedummy)
#artdata$timedummy2 <- factor(as.yearmon(artdata$date, "%Y/%m/%d"))
#artdata$counter2 <- as.numeric(artdata$timedummy2)
##----------------------
##Rank Artists by Volume
##----------------------
#Rank by Total Volume (all)
rankings <- count(artdata, artist)
#rankings <- rankings[order(rankings$n, decreasing = TRUE),]
rankings$rank_all <- dense_rank(desc(rankings$n))    #rank by density, with no gaps (ties = equal)
rankings$rank_total <- row_number(desc(rankings$n))  #equivalent to rank(ties.method = "first")
rankings$n <- NULL
#artdata <- merge(artdata, rankings, by.x="artist", by.y="artist",all.x=TRUE)
#-------------------------------
#Plot total sales by auction house
artplot <- aggregate(artdata$hammer_price, by=list(artdata$timedummy,artdata$ah_code), FUN = length)
artplot$Group.1 <- as.Date(as.yearqtr(artplot$Group.1, format = "%Y Q%q"))
g <- ggplot(artplot, aes(x=Group.1, y=x,fill=Group.2))
g <- g + geom_bar(stat="identity")
g <- g + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
g <- g + scale_fill_discrete(name="Auction House")
g <- g + scale_y_continuous(labels=comma)
g <- g + ylab("Total Number of Sales (Auction Lots)")
g <- g + xlab("Date")
g <- g + scale_x_date(labels = date_format("%Y"),breaks = date_breaks("year"))
g <- g + guides(fill = guide_legend(reverse = TRUE))
g
